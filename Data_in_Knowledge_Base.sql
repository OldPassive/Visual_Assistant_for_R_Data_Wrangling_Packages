-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: localhost    Database: r_data_wrangling_packages_knowledge_base
-- ------------------------------------------------------
-- Server version	5.7.22-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can view log entry',1,'view_logentry'),(5,'Can add permission',2,'add_permission'),(6,'Can change permission',2,'change_permission'),(7,'Can delete permission',2,'delete_permission'),(8,'Can view permission',2,'view_permission'),(9,'Can add group',3,'add_group'),(10,'Can change group',3,'change_group'),(11,'Can delete group',3,'delete_group'),(12,'Can view group',3,'view_group'),(13,'Can add user',4,'add_user'),(14,'Can change user',4,'change_user'),(15,'Can delete user',4,'delete_user'),(16,'Can view user',4,'view_user'),(17,'Can add content type',5,'add_contenttype'),(18,'Can change content type',5,'change_contenttype'),(19,'Can delete content type',5,'delete_contenttype'),(20,'Can view content type',5,'view_contenttype'),(21,'Can add session',6,'add_session'),(22,'Can change session',6,'change_session'),(23,'Can delete session',6,'delete_session'),(24,'Can view session',6,'view_session'),(25,'Can add function',7,'add_function'),(26,'Can change function',7,'change_function'),(27,'Can delete function',7,'delete_function'),(28,'Can view function',7,'view_function'),(29,'Can add dw category',8,'add_dwcategory'),(30,'Can change dw category',8,'change_dwcategory'),(31,'Can delete dw category',8,'delete_dwcategory'),(32,'Can view dw category',8,'view_dwcategory'),(33,'Can add dw subcategory',9,'add_dwsubcategory'),(34,'Can change dw subcategory',9,'change_dwsubcategory'),(35,'Can delete dw subcategory',9,'delete_dwsubcategory'),(36,'Can view dw subcategory',9,'view_dwsubcategory'),(37,'Can add dw terms',10,'add_dwterms'),(38,'Can change dw terms',10,'change_dwterms'),(39,'Can delete dw terms',10,'delete_dwterms'),(40,'Can view dw terms',10,'view_dwterms'),(41,'Can add example',11,'add_example'),(42,'Can change example',11,'change_example'),(43,'Can delete example',11,'delete_example'),(44,'Can view example',11,'view_example'),(45,'Can add r data set',12,'add_rdataset'),(46,'Can change r data set',12,'change_rdataset'),(47,'Can delete r data set',12,'delete_rdataset'),(48,'Can view r data set',12,'view_rdataset'),(49,'Can add r function',13,'add_rfunction'),(50,'Can change r function',13,'change_rfunction'),(51,'Can delete r function',13,'delete_rfunction'),(52,'Can view r function',13,'view_rfunction'),(53,'Can add r package',14,'add_rpackage'),(54,'Can change r package',14,'change_rpackage'),(55,'Can delete r package',14,'delete_rpackage'),(56,'Can view r package',14,'view_rpackage'),(57,'Can add usage',15,'add_usage'),(58,'Can change usage',15,'change_usage'),(59,'Can delete usage',15,'delete_usage'),(60,'Can view usage',15,'view_usage'),(61,'Can add revision',16,'add_revision'),(62,'Can change revision',16,'change_revision'),(63,'Can delete revision',16,'delete_revision'),(64,'Can view revision',16,'view_revision'),(65,'Can add version',17,'add_version'),(66,'Can change version',17,'change_version'),(67,'Can delete version',17,'delete_version'),(68,'Can view version',17,'view_version');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$120000$9NaV4PzMxUVb$ptXp+nJjiiIZ4uXWPAtQ7kJfQfyimck7ILYgB9oL0co=','2018-08-27 17:50:34.464828',1,'admin','','','djkcb36t@163.com',1,1,'2018-07-25 14:32:06.711782');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2018-07-29 11:43:43.470321','1','Example object (1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(2,'2018-07-29 11:59:03.455718','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(3,'2018-07-29 12:00:26.270029','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(4,'2018-07-29 14:51:36.951438','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(5,'2018-07-29 14:51:48.955625','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(6,'2018-07-29 15:15:53.554049','iris','iris',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(7,'2018-07-29 15:42:19.608250','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(8,'2018-07-29 15:42:44.167199','iris','iris',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(9,'2018-07-29 15:44:56.830680','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(10,'2018-07-29 14:50:49.526172','iris','iris',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(11,'2018-07-29 15:39:50.114579','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(12,'2018-07-29 15:45:09.609399','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(13,'2018-07-29 15:45:26.879312','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(14,'2018-07-29 15:45:34.698182','2','tbl_df_example <- tbl_df(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(15,'2018-07-29 15:51:21.037267','1','iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(16,'2018-07-29 15:54:35.034347','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(17,'2018-07-29 15:56:10.729505','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(18,'2018-07-29 15:56:34.367511','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(19,'2018-07-29 15:56:57.057276','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(20,'2018-07-29 15:57:27.856904','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(21,'2018-07-29 15:57:38.126753','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(22,'2018-07-29 18:59:50.736529','3','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(23,'2018-07-29 18:59:56.045847','3','glimpse(iris)',3,'',11,1),(24,'2018-07-30 14:57:02.782326','4','is.tbl(iris)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(25,'2018-07-30 14:57:41.897413','4','is.tbl(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(26,'2018-08-02 14:46:33.443096','30','if_else(x < 0, NA_integer_, x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(27,'2018-08-02 14:46:47.448070','31','case_when(  x == -4 ~ 4,  x == -3 ~ 3,  x == -2 ~ 2,  x == -1 ~ 1)',2,'[{\"changed\": {\"fields\": [\"example\", \"example_input\", \"example_output\"]}}]',11,1),(28,'2018-08-02 14:59:25.554407','33','coalesce(x,0L)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(29,'2018-08-02 15:05:28.522532','34','na_if(x,4)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(30,'2018-08-02 15:14:29.774267','35','near(x,1:5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(31,'2018-08-02 15:17:01.955440','35','near(x,1:5)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(32,'2018-08-02 15:42:49.880248','37','order_by(y, cumsum(y))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(33,'2018-08-02 15:55:47.773516','38','scramble <- function(x) x[sample(nrow(x)), sample(ncol(x))]all_equal(iris, scramble(iris),  ignore_col_order=FALSE)',2,'[{\"changed\": {\"fields\": [\"example\", \"example_input\"]}}]',11,1),(34,'2018-08-02 15:56:50.820959','38','scramble <- function(x) x[sample(nrow(x)), sample(ncol(x))]all_equal(iris, scramble(iris),  ignore_col_order=FALSE)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(35,'2018-08-02 16:03:44.663290','39','glimpse(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(36,'2018-08-02 16:58:14.968989','40','iris %>% group_by(Species) %>% summarise(n = n())',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(37,'2018-08-02 17:13:28.205358','41','group_by_exp <- iris %>% group_by(Species) %>% mutate(specal_Width_mean = mean(Sepal.Width))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(38,'2018-08-02 17:23:55.620847','42','group_by_all(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(39,'2018-08-02 17:30:33.760319','42','group_by_all(iris)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(40,'2018-08-02 17:30:42.073783','42','group_by_all(iris)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(41,'2018-08-02 17:31:50.401359','42','gba_exp <- group_by_all(iris)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(42,'2018-08-02 17:34:40.766788','43','gbat_exp <- group_by_at(iris,vars(Species))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(43,'2018-08-02 17:40:30.263078','44','group_by_if(iris, is.factor)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(44,'2018-08-02 18:09:12.147404','45','groups(gbat_exp)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(45,'2018-08-02 18:12:28.743087','46','group_vars(gbat_exp)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(46,'2018-08-02 18:17:42.045317','42','gba_exp <- group_by_all(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(47,'2018-08-02 18:17:58.304488','43','gbat_exp <- group_by_at(iris,vars(Species))',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(48,'2018-08-02 18:18:10.425720','44','group_by_if(iris, is.factor)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(49,'2018-08-02 18:18:25.116834','45','groups(gbat_exp)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(50,'2018-08-02 18:19:14.806156','46','group_vars(gbat_exp)',2,'[{\"changed\": {\"fields\": [\"example_input\"]}}]',11,1),(51,'2018-08-02 18:29:36.513122','47','select(iris, Species)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(52,'2018-08-02 18:31:25.912412','48','select(iris, -Species)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(53,'2018-08-02 18:38:16.050824','49','select(iris, Sepal.Width: Petal.Width)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(54,'2018-08-02 18:42:00.428924','50','select(iris, contains(\"al\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(55,'2018-08-02 18:44:15.705380','51','select(iris, ends_with(\"Width\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(56,'2018-08-02 20:06:19.297210','52','select(iris, Species, everything())',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(57,'2018-08-02 20:44:53.642928','df_x','df_x',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(58,'2018-08-02 20:46:40.080950','53','select(df_x, num_range(\"x\",1:3))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(59,'2018-08-02 20:47:31.184921','53','select(df_x, num_range(\"x\",1:3))',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(60,'2018-08-02 20:50:12.454721','53','select(iris, matches(\"Length\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(61,'2018-08-02 20:53:49.062844','55','select(iris, one_of(c(\"Species\", \"Sepal.Length\")))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(62,'2018-08-02 20:56:52.950662','56','select(iris, starts_with(\"Petal\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(63,'2018-08-02 21:08:39.832221','57','select_all(iris)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(64,'2018-08-03 16:57:16.113642','58','select_if(iris, is.factor, as.character)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(65,'2018-08-03 17:08:51.381647','59','select_at',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(66,'2018-08-03 18:36:34.340276','63','pull(iris, -1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(67,'2018-08-03 18:47:14.877083','64','filter(iris,  Sepal.Length < 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(68,'2018-08-03 18:49:01.060644','65','filter(iris,  Sepal.Length > 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(69,'2018-08-03 18:51:34.262019','66','filter(iris, Sepal.Length == 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(70,'2018-08-03 18:53:50.849168','67','filter(iris, Seoal.Length <= 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(71,'2018-08-03 18:56:35.631224','68','filter(iris, Sepal.Length >= 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(72,'2018-08-03 18:58:45.507663','69','filter(iris, Sepal.Length != 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(73,'2018-08-03 19:02:02.867390','70','filter(iris, Species %in% c(\"versicolor\", \"virginica\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(74,'2018-08-06 14:56:19.444226','71','filter',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(75,'2018-08-06 15:09:55.073394','72','filter(iris, Sepal.Length == 5.2 & Species == \"versicolor\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(76,'2018-08-06 15:10:08.600024','73','filter(iris, Sepal.Length == 5.2 | Species == \"versicolor\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(77,'2018-08-06 15:23:13.217521','nycflights13::flights','nycflights13::flights',2,'[{\"changed\": {\"fields\": [\"data_set_format\", \"data_set_overview\"]}}]',12,1),(78,'2018-08-06 15:27:57.358197','mtcars','mtcars',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(79,'2018-08-06 15:30:36.224758','74','filter_all(mtcars, any_vars(. > 150))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(80,'2018-08-06 15:39:28.102951','75','filter_if(mtcars, ~ all(floor(.) == .), all_vars(. != 0))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(81,'2018-08-06 15:42:32.144638','76','filter_at(mtcars, vars(starts_with(\"d\")), any_vars((. %% 2) == 0))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(82,'2018-08-06 15:53:16.346048','77','distinct(flights)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(83,'2018-08-06 16:01:47.360454','78','sample_frac(mtcars, 0.1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(84,'2018-08-06 16:06:17.904718','79','sample_n(mtcars, 10)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(85,'2018-08-06 16:16:41.341979','80','slice(mtcars, 1:4)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(86,'2018-08-06 16:28:20.469546','81','top_n(mtcars, -7)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(87,'2018-08-06 16:37:44.561792','82','mutate(df_x, x5 = x1 * x3)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(88,'2018-08-06 16:43:58.638244','83','mtcars %>% transmute(displ_l = disp / 61.0237)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(89,'2018-08-06 16:50:02.043004','84','between(y, -2, 2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(90,'2018-08-06 17:05:18.563496','85','cumall(z)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(91,'2018-08-06 17:08:12.884970','86','cumany(z)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(92,'2018-08-06 17:13:19.559367','87','cummean(y)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(93,'2018-08-06 17:21:54.882722','88','lead(y,1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(94,'2018-08-06 17:26:46.821533','89','lag(y,2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(95,'2018-08-06 17:36:02.304509','90','row_number(x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(96,'2018-08-06 17:39:33.186110','91','ntile(y, 3)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(97,'2018-08-06 17:54:47.176635','92','min_rank(m)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(98,'2018-08-06 17:59:28.179182','93','dense_rank(m)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(99,'2018-08-06 18:02:52.682591','94','percent_rank(m)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(100,'2018-08-06 18:12:32.100461','95','cume_dist(m)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(101,'2018-08-06 18:16:11.747909','96','desc(x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(102,'2018-08-06 18:23:34.392960','97','recode(x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(103,'2018-08-06 18:30:13.532374','98','recode_factor(x, ‘1‘ = \"z\", ‘2‘ = \"y\", .default = \"D\", .missing = \"M\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(104,'2018-08-06 18:42:34.492057','99','mtcars %>% summarise(mean = mean(disp), n = n())',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(105,'2018-08-06 19:23:02.514901','100','iris %>% group_by(Species)  %>% mutate_all(funs(inches = . / 2.54))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(106,'2018-08-06 19:29:48.432151','101','iris %>% as_tibble() %>% mutate_if(is.factor, as.character)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(107,'2018-08-06 19:36:54.849284','102','iris %>% mutate_at(vars(matches(\"Sepal\")), log)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(108,'2018-08-06 22:18:07.170480','103','iris %>% group_by(Species)  %>% transmute_all(funs(inches = . / 2.54))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(109,'2018-08-06 22:30:00.550715','104','iris %>% as_tibble() %>% transmute_if(is.factor, as.character)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(110,'2018-08-06 22:33:18.751931','105','iris %>% transmute_at(vars(matches(\"Sepal\")), log)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(111,'2018-08-06 22:51:49.524511','106','iris %>% group_by(Species) %>% summarise_all(funs(min, max))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(112,'2018-08-07 12:10:03.021634','107','iris %>% summarise_if(is.numeric, mean)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(113,'2018-08-07 12:11:54.387284','108','iris %>% summarise_at(vars(Sepal.Length), mean)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(114,'2018-08-07 12:28:37.579378','109','mtcars %>% tally()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(115,'2018-08-07 12:30:15.927475','110','mtcars %>% count(cyl)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(116,'2018-08-07 12:31:49.697750','111','mtcars %>% add_tally()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(117,'2018-08-07 12:34:01.497852','112','mtcars %>% add_count(cyl)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(118,'2018-08-07 12:45:42.246941','113','first(x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(119,'2018-08-07 12:47:39.644968','114','last(y)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(120,'2018-08-07 12:49:39.605736','115','nth(x,-2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(121,'2018-08-07 12:58:01.333144','117','n_distinct(x, is.na = TRUE)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(122,'2018-08-07 12:58:23.685373','116','carriers <- group_by(flights, carrier) summarise(carriers, n())',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(123,'2018-08-07 13:04:11.736647','118','arrange(mtcars, cyl, disp)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(124,'2018-08-07 13:06:00.557158','119','arrange(mtcars, desc(disp))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(125,'2018-08-07 13:19:07.523511','120','arrange_all(mtcars)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(126,'2018-08-07 13:23:26.239594','121','arrange_at(mtcars, \'wt\')',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(127,'2018-08-07 13:26:10.392376','122','arrange_if(iris, is.numeric)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(128,'2018-08-07 13:31:10.921515','123','rename(iris, petal_length = Petal.Length)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(129,'2018-08-07 14:03:59.637798','127','gather(mini_iris, key = flower_att, value = measurement, -Species)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(130,'2018-08-07 15:01:20.647314','130','unite_(mtcars, \"vs_am\", c(\"vs\",\"am\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(131,'2018-08-07 15:16:51.739325','df_sep','df_sep',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(132,'2018-08-07 15:18:26.675699','130','separate_rows(df_sep, y, z, convert = TRUE)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(133,'2018-08-07 15:18:58.811895','130','separate_rows(df_sep, y, z, convert = TRUE)',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(134,'2018-08-07 15:19:12.058433','131','unite_(mtcars, \"vs_am\", c(\"vs\",\"am\"))',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(135,'2018-08-07 15:38:02.660110','132','expand(mtcars, vs, cyl)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(136,'2018-08-07 15:40:13.061544','133','expand(mtcars, nesting(vs, cyl))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(137,'2018-08-07 15:53:09.495630','134','expand(mtcars, crossing(vs, cyl))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(138,'2018-08-07 16:11:18.633135','135','View(df_comp %>% complete(group, nesting(item_id, item_name), fill = list(value1 = 0)))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(139,'2018-08-07 16:11:46.067452','df_comp','df_comp',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(140,'2018-08-07 16:25:16.666279','df_extract','df_extract',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(141,'2018-08-07 16:25:41.136343','136','df_extract %>% extract(x, c(\"A\", \"B\"), \"([[:alnum:]]+)-([[:alnum:]]+)\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(142,'2018-08-07 17:31:15.158117','137','iris %>%  nest(-Species)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(143,'2018-08-07 17:37:49.990689','138','df_sep %>% transform(y = strsplit(y, \",\")) %>% unnest(y)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(144,'2018-08-07 17:49:21.109373','139','uncount(df_x, x4)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(145,'2018-08-07 17:53:18.628433','140','full_seq(m,1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(146,'2018-08-07 20:48:37.187656','141','df_fill <- data.frame(Month = 1:12, Year = c(2000, rep(NA, 11))) df_fill %>% fill(Year)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(147,'2018-08-07 20:51:44.802850','142','df_fill %>% drop_na()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(148,'2018-08-07 20:57:36.412550','EDAWR::pollution','EDAWR::pollution',2,'[{\"changed\": {\"fields\": [\"data_set_format\", \"data_set_overview\"]}}]',12,1),(149,'2018-08-07 21:00:06.515987','128','pollution %>% spread(size, amount)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(150,'2018-08-07 21:07:44.649175','EDAWR::storms','EDAWR::storms',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(151,'2018-08-07 21:08:02.133438','129','separate(storms, date, c(\"year\", \"month\", \"day\"), sep = \"-\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(152,'2018-08-07 21:26:44.847375','143','replace_na(x,5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(153,'2018-08-07 21:50:16.745006','EDAWR::songs & EDAWR::artists','EDAWR::songs & EDAWR::artists',2,'[{\"changed\": {\"fields\": [\"data_set_format\", \"data_set_overview\"]}}]',12,1),(154,'2018-08-07 21:52:17.448495','144','songs %>% left_join(artists, by = \"name\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(155,'2018-08-07 21:55:16.395685','145','songs %>% right_join(artists, by = \"name\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(156,'2018-08-07 22:04:35.317454','146','songs %>% inner_join(artists, by = \"name\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(157,'2018-08-07 22:06:34.994417','147','songs %>% full_join(artists, by = \"name\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(158,'2018-08-07 22:08:13.808066','148','songs %>% semi_join(artists, by = \"name\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(159,'2018-08-07 22:09:44.365064','149','songs %>% anti_join(artists, by = \"name\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(160,'2018-08-07 22:27:36.739823','df_x1 & df_x2','df_x1 & df_x2',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(161,'2018-08-07 22:37:13.675514','150','bind_rows(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(162,'2018-08-08 10:00:33.044165','151','bind_cols(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(163,'2018-08-08 10:07:39.609719','152','combine(x, y)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(164,'2018-08-08 10:14:58.738176','153','union(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(165,'2018-08-08 10:16:28.317227','154','union_all(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(166,'2018-08-08 10:17:59.624353','155','setequal(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(167,'2018-08-08 10:19:29.755522','156','intersect(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(168,'2018-08-08 10:20:42.349095','157','setdiff(df_x1, df_x2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(169,'2018-08-08 10:24:55.999666','158','mtcars %>% ggvis(~mpg, ~wt)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(170,'2018-08-08 10:31:56.708946','159','plot1 <- mtcars %>% ggvis(~mpg, ~wt)  ggvisControlOutput(\"plot1\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(171,'2018-08-08 14:17:23.058432','161','plot1 <- mtcars %>% ggvis(~mpg, ~wt)  explain(plot1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(172,'2018-08-08 14:29:13.006039','163','mtcars %>% ggvis(~mpg, ~wt) %>% layer_points() %>% layer_smooths(span =  waggle(0.2, 1))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(173,'2018-08-08 14:31:52.476565','164','get_data(plot1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(174,'2018-08-08 15:20:59.909933','169','plot1 <- mtcars %>% ggvis(~mpg, ~wt)  show_spec(plot1)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(175,'2018-08-08 15:29:34.104946','170','prop(\"fill\", ~cyl)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(176,'2018-08-08 15:44:46.450268','175','props(x = ~mpg, y = ~cyl)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(177,'2018-08-08 15:52:39.436946','178','plot1 <- mtcars %>% ggvis(~mpg, ~wt)  plot1 %>% set_options(width = 300, height = 200, padding = padding(10, 10, 10, 10))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(178,'2018-08-08 15:53:24.607917','178','plot1 <- mtcars %>% ggvis(~mpg, ~wt)  plot1 %>% set_options(width = 300, height = 200, padding = padding(10, 10, 10, 10))',2,'[{\"changed\": {\"fields\": [\"example_output\"]}}]',11,1),(179,'2018-08-08 16:00:08.912251','181','mtcars %>% ggvis(~mpg, ~wt, size := left_right(1, 801, value = 51, step = 50)）',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(180,'2018-08-08 16:02:18.357071','182','mtcars %>% ggvis(~mpg, ~wt, opacity :=  up_down(0, 1, value = 0.9, step = 0.05))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(181,'2018-08-08 16:06:19.413396','183','plot1 <- mtcars %>% ggvis(~mpg, ~wt)  plot1 %>% set_options(padding = padding(10, 10, 10, 10))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(182,'2018-08-08 16:17:05.401588','187','mtcars %>% ggvis(~mpg, ~wt) %>% layer_text(text := plot_width())',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(183,'2018-08-08 16:38:24.790197','190','mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% add_axis(\"x\", title = \"Weight\", orient = \"top\")',1,'[{\"added\": {}}]',11,1),(184,'2018-08-08 16:42:41.043050','191','mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% hide_axis(\"x\") %>% hide_axis(\"y\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(185,'2018-08-08 16:48:52.204035','192','mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% add_legend(\"fill\", title = \"Cylinders\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(186,'2018-08-08 16:52:09.293686','193','mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% hide_legend(\"fill\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(187,'2018-08-08 16:56:12.463306','194','mtcars %>% ggvis(x = ~wt, y = ~mpg, size.brush := 400) %>% layer_points() %>% handle_brush(function(items, page_loc, session, ...) { show_tooltip(session, page_loc$r + 5, page_loc$t, html = nrow(items',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(188,'2018-08-08 17:01:15.955335','195','location <- function(location, ...) cat(location$x, \"x\", location$y, \"\\n\")  mtcars %>% ggvis(~mpg, ~wt) %>% layer_points() %>% handle_click(location)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(189,'2018-08-08 17:05:25.772465','196','mtcars %>% ggvis(~mpg, ~wt) %>% layer_points() %>% handle_hover(function(...) cat(\"over\\n\"), function(...) cat(\"off\\n\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(190,'2018-08-08 17:18:53.453964','197','mtcars %>% ggvis(~mpg, ~wt) %>% layer_points()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(191,'2018-08-08 17:28:49.961284','198','mtcars %>% ggvis(~mpg, ~wt) %>% layer_arcs(innerRadius=3,outerRadius=6, startAngle=0,endAngle=0.25 * pi, stroke:=\"white\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(192,'2018-08-08 17:31:47.393754','199','mtcars %>% ggvis(~mpg, ~wt) %>% layer_paths()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(193,'2018-08-08 17:48:27.481945','200','mtcars %>% ggvis(~mpg, ~wt) %>% layer_ribbons()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(194,'2018-08-08 18:04:51.157705','201','hec %>% ggvis(~Hair, ~Eye, fill = ~Freq) %>% layer_rects(width = band(), height = band()) %>% scale_nominal(\"x\", padding = 0, points = FALSE) %>% scale_nominal(\"y\", padding = 0, points = FALSE)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(195,'2018-08-08 18:05:21.155819','hec','hec',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(196,'2018-08-08 18:14:28.952572','202','mtcars %>% ggvis(~mpg, ~wt) %>% layer_text(text:=~mpg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(197,'2018-08-08 20:38:45.753977','204','flights %>% ggvis(~dest) %>% layer_bars()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(198,'2018-08-08 20:43:01.552026','205','mtcars %>% ggvis(~wt, ~mpg, stroke = ~factor(cyl)) %>% layer_lines()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(199,'2018-08-08 20:47:32.120601','206','mtcars %>% ggvis(~factor(cyl), ~mpg) %>% layer_boxplots()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(200,'2018-08-08 20:56:21.492604','207','mtcars %>% ggvis(~mpg) %>% layer_densities()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(201,'2018-08-08 21:01:33.899577','208','mtcars %>% ggvis(~mpg) %>% layer_histograms()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(202,'2018-08-08 21:06:56.927178','209','mtcars %>% ggvis(~mpg) %>% layer_freqpolys(width = 2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(203,'2018-08-08 21:11:37.727143','210','mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_model_predictions(model = \"lm\", domain = c(0, 8))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(204,'2018-08-08 21:14:54.583469','211','mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths(span = 0.2)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(205,'2018-08-08 21:16:53.193336','212','mtcars %>% ggvis(~mpg, ~wt) %>% layer_guess()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(206,'2018-08-08 21:19:20.825884','213','NULL %>% ggvis(~mpg, ~wt) %>% add_data(mtcars) %>% layer_points()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(207,'2018-08-08 21:22:04.341545','214','mtcars %>% ggvis() %>% add_props(~wt, ~mpg) %>% layer_points()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(208,'2018-08-08 21:25:08.186814','215','mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% add_relative_scales()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(209,'2018-08-08 21:30:00.022234','217','mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths(se = input_checkbox(label = \"Confidence interval\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(210,'2018-08-08 21:41:14.919992','219','mtcars %>% ggvis(~wt, ~mpg, fill := input_text(label = \"Point color\", value = \"red\")) %>% layer_bars()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(211,'2018-08-08 21:43:18.843210','220','mtcars %>% ggvis(~wt, ~mpg, size :=  input_numeric(label = \"Point size\", value = 25)) %>% layer_points()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(212,'2018-08-08 21:53:03.334124','221','mtcars %>% ggvis(~wt, ~mpg) %>% layer_model_predictions(model = input_select(choices = c(\"Linear\" = \"lm\", \"LOESS\" = \"loess\"), selected = \"loess\", label = \"Model type\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(213,'2018-08-08 21:54:53.848901','222','mtcars %>% ggvis(~wt, ~mpg) %>% layer_model_predictions(model = input_radiobuttons(choices = c(\"Linear\" = \"lm\", \"LOESS\" = \"loess\"), selected = \"loess\", label = \"Model type\"))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(214,'2018-08-08 22:00:29.995595','223','mtcars %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points(fill := input_checkboxgroup(choices = c(\"Red\" = \"r\", \"Green\" = \"g\", \"Blue\" = \"b\"), label = \"Point color components\", map = function(val) {rgb(0.8 *',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(215,'2018-08-08 22:31:21.091987','225','mtcars %>% ggvis(~wt, ~mpg, fill = ~hp) %>% layer_points()%>% scale_numeric(\"x\", domain = c(NA, 3), clamp = TRUE, nice = FALSE)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(216,'2018-08-08 23:04:08.355705','227','mtcars %>% ggvis(x = ~wt, y = ~mpg, opacity = ~factor(cyl)) %>% layer_points() %>% scale_nominal(\"opacity\", range = c(0.2, 1))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(217,'2018-08-08 23:16:00.942085','229','storms %>% ggvis(~date, ~storm) %>% layer_points() %>%  scale_datetime(\"x\", nice = \"year\")',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(218,'2018-08-08 23:22:13.866370','231','lb <- linked_brush(keys = 1:nrow(mtcars), \"red\")  mtcars %>% ggvis(~disp, ~mpg) %>% layer_points(size.brush := 400) %>% lb$input() %>% layer_points(fill := \"red\", data = reactive(mtcars[lb$selected(),',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(219,'2018-08-08 23:29:26.287889','235','mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% group_by(cyl) %>% layer_paths()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(220,'2018-08-08 23:31:58.564286','236','mtcars %>% ggvis(~disp, ~mpg, stroke = ~factor(cyl)) %>% auto_group() %>% layer_paths()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(221,'2018-08-08 23:42:52.479204','237','mtcars %>% ggvis(singular(), ~mpg) %>% layer_points()',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(222,'2018-08-08 23:45:32.357910','239','vector_type(x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(223,'2018-08-08 23:45:32.362838','239','vector_type(x)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(224,'2018-08-08 23:55:14.895254','241','resolution(y, FALSE)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(225,'2018-08-08 23:58:07.911912','242','mtcars %>% compute_count(~cyl, ~wt)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(226,'2018-08-09 00:02:13.310096','243','mtcars %>% compute_tabulate(~factor(cyl))',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(227,'2018-08-09 00:05:15.273173','244','mtcars %>% compute_count(~mpg) %>% compute_align(~x_)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(228,'2018-08-09 00:11:59.934809','245','mtcars %>% group_by(cyl) %>% compute_bin(~mpg, width = 10)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(229,'2018-08-09 00:14:59.625719','246','mtcars %>% cbind(count = 1) %>% compute_stack(~count, ~cyl)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(230,'2018-08-09 00:19:12.058644','247','mtcars %>% compute_density(~mpg, n = 5)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(231,'2018-08-09 00:23:30.075161','248','mtcars %>% group_by(cyl) %>% compute_boxplot(~mpg)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(232,'2018-08-09 00:29:20.874323','249','mtcars %>% compute_model_prediction(mpg ~ wt, n = 10, se = TRUE)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(233,'2018-08-09 00:34:29.752702','250','mtcars %>% compute_smooth(mpg ~ wt)',2,'[{\"changed\": {\"fields\": [\"example_input\", \"example_output\"]}}]',11,1),(234,'2018-08-16 03:16:34.348781','df_fill','df_fill',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1),(235,'2018-08-16 03:16:47.280987','df_y','df_y',2,'[{\"changed\": {\"fields\": [\"data_set_overview\"]}}]',12,1);
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'admin','logentry'),(3,'auth','group'),(2,'auth','permission'),(4,'auth','user'),(5,'contenttypes','contenttype'),(8,'Knowledge_Base','dwcategory'),(9,'Knowledge_Base','dwsubcategory'),(10,'Knowledge_Base','dwterms'),(11,'Knowledge_Base','example'),(7,'Knowledge_Base','function'),(12,'Knowledge_Base','rdataset'),(13,'Knowledge_Base','rfunction'),(14,'Knowledge_Base','rpackage'),(15,'Knowledge_Base','usage'),(16,'reversion','revision'),(17,'reversion','version'),(6,'sessions','session');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `django_migrations`
--

LOCK TABLES `django_migrations` WRITE;
/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2018-07-24 16:18:52.144474'),(2,'auth','0001_initial','2018-07-24 16:18:53.057008'),(3,'admin','0001_initial','2018-07-24 16:18:53.429889'),(4,'admin','0002_logentry_remove_auto_add','2018-07-24 16:18:53.446751'),(5,'admin','0003_logentry_add_action_flag_choices','2018-07-24 16:18:53.476950'),(6,'contenttypes','0002_remove_content_type_name','2018-07-24 16:18:53.643671'),(7,'auth','0002_alter_permission_name_max_length','2018-07-24 16:18:53.721950'),(8,'auth','0003_alter_user_email_max_length','2018-07-24 16:18:53.805216'),(9,'auth','0004_alter_user_username_opts','2018-07-24 16:18:53.814182'),(10,'auth','0005_alter_user_last_login_null','2018-07-24 16:18:53.905377'),(11,'auth','0006_require_contenttypes_0002','2018-07-24 16:18:53.909321'),(12,'auth','0007_alter_validators_add_error_messages','2018-07-24 16:18:53.918272'),(13,'auth','0008_alter_user_username_max_length','2018-07-24 16:18:54.002628'),(14,'auth','0009_alter_user_last_name_max_length','2018-07-24 16:18:54.110075'),(15,'sessions','0001_initial','2018-07-24 16:18:54.163745'),(17,'Knowledge_Base','0001_initial','2018-07-25 13:37:00.710227'),(18,'Knowledge_Base','0002_auto_20180728_2230','2018-07-28 21:31:52.013930'),(19,'Knowledge_Base','0003_example_example','2018-07-28 21:40:56.233009'),(20,'Knowledge_Base','0004_auto_20180729_1529','2018-07-29 15:29:31.194969'),(21,'reversion','0001_squashed_0004_auto_20160611_1202','2018-07-29 15:29:31.574418'),(22,'Knowledge_Base','0005_auto_20180729_1543','2018-07-29 15:43:58.645425'),(23,'Knowledge_Base','0006_auto_20180808_1733','2018-08-08 16:35:27.669038'),(24,'Knowledge_Base','0007_auto_20180808_2259','2018-08-08 21:59:58.174409'),(25,'Knowledge_Base','0008_auto_20180816_0439','2018-08-16 03:39:13.877836'),(26,'Knowledge_Base','0009_auto_20180816_1036','2018-08-16 09:37:03.992798'),(27,'Knowledge_Base','0010_auto_20180816_1038','2018-08-16 09:38:09.263340');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('01if2isl9muxikz7qz3fprbm5lx6g149','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-08-30 03:16:12.701051'),('czzwcmjxm0cgn8okvpwm1w9s6mq93jmp','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-08-31 21:52:59.642367'),('kdih6d8n6tgfjfp59a1b3nja9cx0ebvf','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-08-11 22:20:53.491816'),('n34kaypx52xfkw7f1rjs93p98ogt8cjy','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-08-22 20:38:29.005986'),('oylul4krjslg4ac2qirspfru20pgpe92','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-08-12 11:42:57.496494'),('w6wyj3cro6vvjom9bthih8mvt3cs38ho','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-09-10 17:50:34.468818'),('wz65ekow7nof7qdseeosw1wg3zv9itax','ZmY1NjRiNDE3ZGQ5ZTg1NzMxZmZmNjg1ZmE1MzJjODczODZhNDA4Zjp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI0YmQ1NDA3Nzk1MWFmMmNkZmYxMTdmZTQ4MmE5Njc0YTE3ODZhYmEwIn0=','2018-08-20 14:56:01.169752');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_dwcategory`
--

LOCK TABLES `knowledge_base_dwcategory` WRITE;
/*!40000 ALTER TABLE `knowledge_base_dwcategory` DISABLE KEYS */;
INSERT INTO `knowledge_base_dwcategory` VALUES (1,'Data Manipulation','Changing the variables, values, and units of analysis contained in the data set.'),(2,'Data Tidying','Changing the layout of tabular data to make.'),(3,'Data Visualization','Transforming the data to a visual format that reveals visual pattern.');
/*!40000 ALTER TABLE `knowledge_base_dwcategory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_dwsubcategory`
--

LOCK TABLES `knowledge_base_dwsubcategory` WRITE;
/*!40000 ALTER TABLE `knowledge_base_dwsubcategory` DISABLE KEYS */;
INSERT INTO `knowledge_base_dwsubcategory` VALUES (1,'Conventions',NULL,1),(2,'View',NULL,1),(3,'Group Observation',NULL,1),(4,'Subset Variables (Columns)',NULL,1),(5,'Subset Observations (Rows)',NULL,1),(6,'Derive Variables',NULL,1),(7,'Window Functions','Functions that take a vector of values and return a verctor of values. A window function is a variation on an aggregation function. The output of a window function depends on all its input values, so window functions don’t include functions that work element-wise, like + or round(). Window functions are used in conjunction with mutate() and filter() to solve a wide range of problems. There are five main families of window functions. Two families are unrelated to aggregation functions:\r\n\r\nRanking and ordering functions: row_number(), min_rank(), dense_rank(), cume_dist(), percent_rank(), and ntile(). These functions all take a vector to order by, and return various types of ranks.\r\n\r\nOffsets lead() and lag() allow you to access the previous and next values in a vector, making it easy to compute differences and trends.\r\n\r\nThe other three families are variations on familiar aggregate functions:\r\n\r\nCumulative aggregates: cumsum(), cummin(), cummax() (from base R), and cumall(), cumany(), and cummean() (from dplyr).\r\n\r\nRolling aggregates operate in a fixed width window. You won’t find them in base R or in dplyr, but there are many implementations in other packages, such as RcppRoll.\r\n\r\nRecycled aggregates, where an aggregate is repeated to match the length of the input. These are not needed in R because vector recycling automatically recycles aggregates where needed. They are important in SQL, because the presence of an aggregation function usually tells the database to return only one row per group.\r\n\r\nEach family is described in more detail below, focussing on the general goals and how to use them with dplyr. For more details, refer to the individual function documentation.',1),(8,'Summarise Observation',NULL,1),(9,'Aggregation Functions','Functions that take a vector of values and return a single value.',1),(10,'Reshaping Data',NULL,2),(11,'Combination of Datasets',NULL,2),(12,'Basic Plot',NULL,3),(13,'Properties (ggvis)',NULL,3),(14,'Layers (ggvis)',NULL,3),(15,'Visualization Modification',NULL,3),(16,'Group Visualization',NULL,3),(17,'Related Calculations',NULL,3);
/*!40000 ALTER TABLE `knowledge_base_dwsubcategory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_dwterms`
--

LOCK TABLES `knowledge_base_dwterms` WRITE;
/*!40000 ALTER TABLE `knowledge_base_dwterms` DISABLE KEYS */;
INSERT INTO `knowledge_base_dwterms` VALUES (1,'Tidy data','1. Each varibles is saved in its own column. 2. Each observation is saved in its own row. 3. Each \"type\" of observation stored in a single table.'),(2,'Variable','A quantity, quality, or property that can be measured.'),(3,'Value','The state of a variable when be measured (varies from measurement to measurement).'),(4,'Observation','The values of several variables measured under similar conditions.'),(5,'Units of Analysis','The combination of conditions that define an observation.'),(6,'util::install.packages(c(\"dplyr\", \"tidyr\", \"ggvis\", \"nycflights\"))','Download and install packages from CRAN-like repositories or from local files. For data wrangling tasks, these three packages can be installed together by using a vector of strings.'),(7,'util::install.packages(\"devtools\");  devtool::install_github(\"rstudio/EDAWR\")','Download and install package EDAWR.'),(8,'base::library(dplyr)','Load add-on packages.'),(9,'util::View(data_frame)','View data set in spreadsheet-like diplay. (note capital V)');
/*!40000 ALTER TABLE `knowledge_base_dwterms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_example`
--

LOCK TABLES `knowledge_base_example` WRITE;
/*!40000 ALTER TABLE `knowledge_base_example` DISABLE KEYS */;
INSERT INTO `knowledge_base_example` VALUES (1,'examples/input/exp1_i_iris.png','examples/output/exp1_o.png','iris',1,'iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Width)) %>% arrange(avg)'),(2,'examples/input/exp2_i.PNG','examples/output/exp2_o.PNG','iris',2,'tbl_df_example <- tbl_df(iris)'),(4,'examples/input/exp1_i_iris_rgcfgAt.png','examples/output/exp3_o.png','iris',4,'is.tbl(iris)'),(30,'examples/input/exp30_i_x.PNG','examples/output/exp30_o.PNG','x',30,'if_else(x < 0, NA_integer_, x)'),(31,'examples/input/exp30_i_x_tSnrxf6.PNG','examples/output/exp31_o.PNG','x',31,'case_when(  x == -4 ~ 4,  x == -3 ~ 3,  x == -2 ~ 2,  x == -1 ~ 1)'),(33,'examples/input/exp30_i_x_3wCUU9K.PNG','examples/output/exp33_o.PNG','x',33,'coalesce(x,0L)'),(34,'examples/input/exp30_i_x_Hkcsqbq.PNG','examples/output/exp34_o.PNG','x',34,'na_if(x,4)'),(35,'examples/input/exp30_i_x_q7rmbpg.PNG','examples/output/exp35_o.PNG','x',35,'near(x, sqrt(2) ^ 2)'),(37,'examples/input/exp37_i_y.PNG','examples/output/exp37_o.PNG','y',37,'order_by(y, cumsum(y))'),(38,'examples/input/exp1_i_iris_lZlEtAZ.png','examples/output/exp38_o.PNG','iris',38,'scramble <- function(x) x[sample(nrow(x)), sample(ncol(x))]  all_equal(iris, scramble(iris),  ignore_col_order=FALSE)'),(39,'examples/input/exp1_i_iris_DY46exW.png','examples/output/exp39_o.png','iris',39,'glimpse(iris)'),(40,'examples/input/exp1_i_iris_DqP23zi.png','examples/output/exp40_o.PNG','iris',40,'iris %>% group_by(Species) %>% summarise(n = n())'),(41,'examples/input/exp1_i_iris_qse0F25.png','examples/output/exp41_o.PNG','iris',41,'group_by_exp <- iris %>% group_by(Species) %>% mutate(specal_Width_mean = mean(Sepal.Width))'),(42,'examples/input/exp42_i.PNG','examples/output/exp42_o.PNG','iris',42,'gba_exp <- group_by_all(iris)'),(43,'examples/input/exp42_i_O2C00W1.PNG','examples/output/exp43_o.PNG','iris',43,'gbat_exp <- group_by_at(iris,vars(Species))'),(44,'examples/input/exp42_i_Ammbz6D.PNG','examples/output/exp44_o.PNG','iris',44,'group_by_if(iris, is.factor)'),(45,'examples/input/exp42_i_0ApiXsu.PNG','examples/output/exp43_o_lTjf2yH.PNG','iris',45,'groups(gbat_exp)'),(46,'examples/input/exp46_i.PNG','examples/output/exp46_o.PNG','iris',46,'group_vars(gbat_exp)'),(47,'examples/input/exp1_i_iris_YAuJoDZ.png','examples/output/exp47_o.PNG','iris',47,'select(iris, Species)'),(48,'examples/input/exp1_i_iris_X4dx4I3.png','examples/output/exp48_o.PNG','iris',48,'select(iris, -Species)'),(49,'examples/input/exp1_i_iris_PtwC716.png','examples/output/exp49_o.PNG','iris',49,'select(iris, Sepal.Width: Petal.Width)'),(50,'examples/input/exp1_i_iris_TSEkaY1.png','examples/output/exp50_o.PNG','iris',50,'select(iris, contains(\"al\"))'),(51,'examples/input/exp1_i_iris_Vh54rAd.png','examples/output/exp51_o.PNG','iris',51,'select(iris, ends_with(\"Width\"))'),(52,'examples/input/exp1_i_iris_W4KrEQa.png','examples/output/exp52_o.PNG','iris',52,'select(iris, Species, everything())'),(53,'examples/input/exp1_i_iris_uqUSNpe.png','examples/output/exp53_o.PNG','iris',53,'select(iris, matches(\"Length\"))'),(54,'examples/input/df_x.PNG','examples/output/exp54_o.PNG','df_x',54,'select(df_x, num_range(\"x\",1:3))'),(55,'examples/input/exp1_i_iris_uc68wvR.png','examples/output/exp55_o.PNG','iris',55,'select(iris, one_of(c(\"Species\", \"Sepal.Length\")))'),(56,'examples/input/exp1_i_iris_cZQPyBl.png','examples/output/exp56_o.PNG','iris',56,'select(iris, starts_with(\"Petal\"))'),(57,'examples/input/exp1_i_iris_cfd5jLC.png','examples/output/exp57_o.PNG','iris',57,'select_all(iris)'),(58,'examples/input/exp1_i_iris_VUcu7j3.png','examples/output/exp58_o.PNG','iris',58,'select_if(iris, is.factor, as.character)'),(59,'examples/input/exp1_i_iris_kiUd56z.png','examples/output/exp59_o.PNG','iris',59,'select_at(iris,vars(Species))'),(63,'examples/input/exp1_i_iris_gRCtTdp.png','examples/output/exp63_o.PNG','iris',63,'pull(iris, -1)'),(64,'examples/input/exp64_i_iris.PNG','examples/output/exp64_o.PNG','iris',64,'filter(iris,  Sepal.Length < 5)'),(65,'examples/input/exp64_i_iris_RwKVDyi.PNG','examples/output/exp65_o.PNG','iris',65,'filter(iris,  Sepal.Length > 5)'),(66,'examples/input/exp64_i_iris_0CEpfJi.PNG','examples/output/exp66_o.PNG','iris',66,'filter(iris, Sepal.Length == 5)'),(67,'examples/input/exp64_i_iris_58iCcGL.PNG','examples/output/exp67_o.PNG','iris',67,'filter(iris, Sepal.Length <= 5)'),(68,'examples/input/exp1_i_iris_52tP8iA.png','examples/output/exp68_o.PNG','iris',68,'filter(iris, Sepal.Length >= 5)'),(69,'examples/input/exp64_i_iris_e84DUHX.PNG','examples/output/exp69_o.PNG','iris',69,'filter(iris, Sepal.Length != 5)'),(70,'examples/input/exp64_i_iris_0Je18hG.PNG','examples/output/exp70_o.PNG','iris',70,'filter(iris, Species %in% c(\"versicolor\", \"virginica\"))'),(71,'examples/input/exp71_i_flights.PNG','examples/output/exp71_o.PNG','nycflights13::flights',71,'filter(flights, !is.na(arr_delay))'),(72,'examples/input/exp1_i_iris_5kMgNih.png','examples/output/exp72_o.PNG','iris',72,'filter(iris, Sepal.Length == 5.2 & Species == \"versicolor\")'),(73,'examples/input/exp1_i_iris_E2D9U3v.png','examples/output/exp73_o.PNG','iris',73,'filter(iris, Sepal.Length == 5.2 | Species == \"versicolor\")'),(74,'examples/input/mtcars.PNG','examples/output/exp74_o.PNG','mtcars',74,'filter_all(mtcars, any_vars(. > 150))'),(75,'examples/input/mtcars_F8ODwv8.PNG','examples/output/exp75_o.PNG','mtcars',75,'filter_if(mtcars, ~ all(floor(.) == .), all_vars(. != 0))'),(76,'examples/input/mtcars_gEgRuQE.PNG','examples/output/exp76_o.PNG','mtcars',76,'filter_at(mtcars, vars(starts_with(\"d\")), any_vars((. %% 2) == 0))'),(77,'examples/input/exp77_i_df_y.PNG','examples/output/exp77_o.PNG','df_y',77,'distinct(df_y)'),(78,'examples/input/mtcars_k5j9m9R.PNG','examples/output/exp78_o.PNG','mtcars',78,'sample_frac(mtcars, 0.1)'),(79,'examples/input/mtcars_bkKTcRH.PNG','examples/output/exp79_o.PNG','mtcars',79,'sample_n(mtcars, 10)'),(80,'examples/input/mtcars_PD6ql1n.PNG','examples/output/exp80_o.PNG','mtcars',80,'slice(mtcars, 1:4)'),(81,'examples/input/mtcars_rpmAW4p.PNG','examples/output/exp81_o.PNG','mtcars',81,'top_n(mtcars, -7)'),(82,'examples/input/df_x_R7Fs71T.PNG','examples/output/exp82_o.PNG','df_x',82,'mutate(df_x, x5 = x1 * x3)'),(83,'examples/input/mtcars_qUNyfsw.PNG','examples/output/exp83_o.PNG','mtcars',83,'mtcars %>% transmute(displ_l = disp / 61.0237)'),(84,'examples/input/exp37_i_y_UhDVB6x.PNG','examples/output/exp84_o.PNG','y',84,'between(y, -2, 2)'),(85,'examples/input/z.PNG','examples/output/exp85_o.PNG','z',85,'cumall(z)'),(86,'examples/input/z_TeZJN3N.PNG','examples/output/exp86_o.PNG','z',86,'cumany(z)'),(87,'examples/input/exp37_i_y_bc5iYpR.PNG','examples/output/exp87_o.PNG','y',87,'cummean(y)'),(88,'examples/input/exp37_i_y_3wp043Y.PNG','examples/output/exp88_o.PNG','y',88,'lead(y,1)'),(89,'examples/input/exp37_i_y_EIadbyr.PNG','examples/output/exp89_o.PNG','y',89,'lag(y,2)'),(90,'examples/input/exp30_i_x_90bVHHe.PNG','examples/output/exp90_o.PNG','x',90,'row_number(x)'),(91,'examples/input/exp37_i_y_HLlOfrV.PNG','examples/output/exp91_o.PNG','y',91,'ntile(y, 3)'),(92,'examples/input/m.PNG','examples/output/exp92_o.PNG','m',92,'min_rank(m)'),(93,'examples/input/m_PPKGQyv.PNG','examples/output/exp93_o.PNG','m',93,'dense_rank(m)'),(94,'examples/input/m_T6eytku.PNG','examples/output/exp94_o.PNG','m',94,'percent_rank(m)'),(95,'examples/input/m_qmom7P3.PNG','examples/output/exp95_o.PNG','m',95,'cume_dist(m)'),(96,'examples/input/exp30_i_x_bSZ9NW9.PNG','examples/output/exp96_o.PNG','x',96,'desc(x)'),(97,'examples/input/exp30_i_x_D1nabZ8.PNG','examples/output/exp97_o.PNG','x',97,'recode(x)'),(98,'examples/input/exp30_i_x_yBKtDbp.PNG','examples/output/exp98_o.PNG','x',98,'recode_factor(x, ‘1‘ = \"z\", ‘2‘ = \"y\", .default = \"D\", .missing = \"M\")'),(99,'examples/input/mtcars_lEY8pV9.PNG','examples/output/exp99_o.PNG','mtcars',99,'mtcars %>% summarise(mean = mean(disp), n = n())'),(100,'examples/input/exp1_i_iris_znd3NIT.png','examples/output/exp100_o.PNG','iris',100,'iris %>% group_by(Species)  %>% mutate_all(funs(inches = . / 2.54))'),(101,'examples/input/exp101_i.PNG','examples/output/exp101_o.PNG','iris',101,'iris %>% as_tibble() %>% mutate_if(is.factor, as.character)'),(102,'examples/input/exp1_i_iris_dt86k4Y.png','examples/output/exp102_o.PNG','iris',102,'iris %>% mutate_at(vars(matches(\"Sepal\")), log)'),(103,'examples/input/exp1_i_iris_cUMTJRq.png','examples/output/exp103_o.PNG','iris',103,'iris %>% group_by(Species)  %>% transmute_all(funs(inches = . / 2.54))'),(104,'examples/input/exp1_i_iris_Btz3TUY.png','examples/output/exp104_o.PNG','iris',104,'iris %>% as_tibble() %>% transmute_if(is.factor, as.character)'),(105,'examples/input/exp1_i_iris_keBLPfX.png','examples/output/exp105_o.PNG','iris',105,'iris %>% transmute_at(vars(matches(\"Sepal\")), log)'),(106,'examples/input/exp1_i_iris_Yt3OAkw.png','examples/output/exp106_o.PNG','iris',106,'iris %>% group_by(Species) %>% summarise_all(funs(min, max))'),(107,'examples/input/exp1_i_iris_izYeYm9.png','examples/output/exp107_o.PNG','iris',107,'iris %>% summarise_if(is.numeric, mean)'),(108,'examples/input/exp1_i_iris_kgi1WJH.png','examples/output/exp108_o.PNG','iris',108,'iris %>% summarise_at(vars(Sepal.Length), mean)'),(109,'examples/input/mtcars_jzuynZt.PNG','examples/output/exp109_o.PNG','mtcars',109,'mtcars %>% tally()'),(110,'examples/input/mtcars_bA5B2Pj.PNG','examples/output/exp110_o.PNG','mtcars',110,'mtcars %>% count(cyl)'),(111,'examples/input/mtcars_h5hPhoQ.PNG','examples/output/exp111_o.PNG','mtcars',111,'mtcars %>% add_tally()'),(112,'examples/input/mtcars_BvCrKLA.PNG','examples/output/exp112_o.PNG','mtcars',112,'mtcars %>% add_count(cyl)'),(113,'examples/input/exp30_i_x_4gNTZEe.PNG','examples/output/exp113_o.PNG','x',113,'first(x)'),(114,'examples/input/exp37_i_y_5DawIIO.PNG','examples/output/exp114_o.PNG','y',114,'last(y)'),(115,'examples/input/exp30_i_x_NQqG06f.PNG','examples/output/exp115_o.PNG','x',115,'nth(x,-2)'),(116,'examples/input/exp71_i_flights_fjyoMai.PNG','examples/output/exp116_o.PNG','nycflights13::flights',116,'carriers <- group_by(flights, carrier) summarise(carriers, n())'),(117,'examples/input/exp30_i_x_ZNEVnk4.PNG','examples/output/exp117_o.PNG','x',117,'n_distinct(x, is.na = TRUE)'),(118,'examples/input/mtcars_CW9xKpO.PNG','examples/output/exp118_o.PNG','mtcars',118,'arrange(mtcars, cyl, disp)'),(119,'examples/input/mtcars_LIgCmTn.PNG','examples/output/exp119_o.PNG','mtcars',119,'arrange(mtcars, desc(disp))'),(120,'examples/input/mtcars_8aM9irK.PNG','examples/output/exp120_o.PNG','mtcars',120,'arrange_all(mtcars)'),(121,'examples/input/mtcars_qwu09w4.PNG','examples/output/exp121_o.PNG','mtcars',121,'arrange_at(mtcars, \'wt\')'),(122,'examples/input/exp1_i_iris_ukcj32E.png','examples/output/exp122_o.PNG','mtcars',122,'arrange_if(iris, is.numeric)'),(123,'examples/input/exp1_i_iris_kgbglI2.png','examples/output/exp123_o.PNG','iris',123,'rename(iris, petal_length = Petal.Length)'),(127,'examples/input/exp1_i_iris_WjtJHq7.png','examples/output/exp127_o.PNG','iris',127,'gather_iris <- gather(iris, key = flower_att, value = measurement, -Species)'),(128,'examples/input/pollution.PNG','examples/output/exp128_o.PNG','EDAWR::pollution',128,'pollution %>% spread(size, amount)'),(129,'examples/input/storms.PNG','examples/output/exp129_o.PNG','EDAWR::storms',129,'separate(storms, date, c(\"year\", \"month\", \"day\"), sep = \"-\")'),(130,'examples/input/df_sep.PNG','examples/output/exp130_o.PNG','df_sep',130,'separate_rows(df_sep, y, z, convert = TRUE)'),(131,'examples/input/mtcars_KzFwCai.PNG','examples/output/exp131_o.PNG','mtcars',131,'unite_(mtcars, \"vs_am\", c(\"vs\",\"am\"))'),(132,'examples/input/mtcars_J7Ew1r8.PNG','examples/output/exp132_o.PNG','mtcars',132,'expand(mtcars, vs, cyl)'),(133,'examples/input/mtcars_6p1zZfL.PNG','examples/output/exp133_o.PNG','mtcars',133,'expand(mtcars, nesting(vs, cyl))'),(134,'examples/input/mtcars_FSSqSBE.PNG','examples/output/exp134_o.PNG','mtcars',134,'expand(mtcars, crossing(vs, cyl))'),(135,'examples/input/df_comp.PNG','examples/output/exp135_o.PNG','df_comp',135,'df_comp %>% complete(group, nesting(item_id, item_name), fill = list(value1 = 0))'),(136,'examples/input/df_extract.PNG','examples/output/exp136_o.PNG','df_extract',136,'df_extract %>% extract(x, c(\"A\", \"B\"), \"([[:alnum:]]+)-([[:alnum:]]+)\")'),(137,'examples/input/exp1_i_iris_NsO7rWA.png','examples/output/exp137_o.PNG','iris',137,'iris %>%  nest(-Species)'),(138,'examples/input/df_sep_8YmQAKr.PNG','examples/output/exp138_o.PNG','df_sep',138,'df_sep %>% transform(y = strsplit(y, \",\")) %>% unnest(y)'),(139,'examples/input/df_x_V9Y83oz.PNG','examples/output/exp139_o.PNG','df_x',139,'uncount(df_x, x4)'),(140,'examples/input/m_Qd9vtJ2.PNG','examples/output/exp140_o.PNG','m',140,'full_seq(m,1)'),(141,'examples/input/df_fill.PNG','examples/output/exp141_o.PNG','df_fill',141,'df_fill <- data.frame(Month = 1:12, Year = c(2000, rep(NA, 11))) df_fill %>% fill(Year)'),(142,'examples/input/df_fill_KKzyiyI.PNG','examples/output/exp142_o.PNG','df_fill',142,'df_fill %>% drop_na()'),(143,'examples/input/exp30_i_x_x00tcri.PNG','examples/output/exp143_o.PNG','x',143,'replace_na(x,5)'),(144,'examples/input/songs__artists.png','examples/output/exp144_o.PNG','EDAWR::songs&artists',144,'songs %>% left_join(artists, by = \"name\")'),(145,'examples/input/songs__artists_ffTtile.png','examples/output/exp145_o.PNG','EDAWR::songs&artists',145,'songs %>% right_join(artists, by = \"name\")'),(146,'examples/input/songs__artists_qOLa968.png','examples/output/exp146_o.PNG','EDAWR::songs&artists',146,'songs %>% inner_join(artists, by = \"name\")'),(147,'examples/input/songs__artists_VikbinV.png','examples/output/exp147_o.PNG','EDAWR::songs&artists',147,'songs %>% full_join(artists, by = \"name\")'),(148,'examples/input/songs__artists_fuP6mot.png','examples/output/exp148_o.PNG','EDAWR::songs&artists',148,'songs %>% semi_join(artists, by = \"name\")'),(149,'examples/input/songs__artists_a3S5HEK.png','examples/output/exp149_o.PNG','EDAWR::songs&artists',149,'songs %>% anti_join(artists, by = \"name\")'),(150,'examples/input/x1__x2.png','examples/output/exp150_o.PNG','df_x1&df_x2',150,'bind_rows(df_x1, df_x2)'),(151,'examples/input/x1__x2_JmRk5jw.png','examples/output/exp151_o.PNG','df_x1&df_x2',151,'bind_cols(df_x1, df_x2)'),(152,'examples/input/exp30_i_x_4XaVrpV.PNG','examples/output/exp152_o.PNG','x',152,'combine(x, y)'),(153,'examples/input/x1__x2_0HmGMKQ.png','examples/output/exp153_o.PNG','df_x1&df_x2',153,'union(df_x1, df_x2)'),(154,'examples/input/x1__x2_LFnp7eO.png','examples/output/exp154_o.PNG','df_x1&df_x2',154,'union_all(df_x1, df_x2)'),(155,'examples/input/x1__x2_MKBIcJC.png','examples/output/exp155_o.PNG','df_x1&df_x2',155,'setequal(df_x1, df_x2)'),(156,'examples/input/x1__x2_ssZDJn7.png','examples/output/exp156_o.PNG','df_x1&df_x2',156,'intersect(df_x1, df_x2)'),(157,'examples/input/x1__x2_QUr8U9e.png','examples/output/exp157_o.PNG','df_x1&df_x2',157,'setdiff(df_x1, df_x2)'),(158,'examples/input/mtcars_4BD9HX5.PNG','examples/output/exp158_o.PNG','mtcars',158,'mtcars %>% ggvis(~mpg, ~wt)'),(159,'examples/input/mtcars_7bY8OsK.PNG','examples/output/exp159_o.PNG','mtcars',159,'plot1 <- mtcars %>% ggvis(~mpg, ~wt)  ggvisControlOutput(\"plot1\")'),(161,'examples/input/mtcars_1vwin8t.PNG','examples/output/exp161_o.PNG','mtcars',161,'plot1 <- mtcars %>% ggvis(~mpg, ~wt)  explain(plot1)'),(163,'examples/input/mtcars_3iPRMtV.PNG','examples/output/exp163_o.png','mtcars',163,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_points() %>% layer_smooths(span =  waggle(0.2, 1))'),(164,'examples/input/mtcars_NOwJyFk.PNG','examples/output/exp164_o.PNG','mtcars',164,'plot1 <- mtcars %>% ggvis(~mpg, ~wt)  get_data(plot1)'),(169,'examples/input/mtcars_7b9vDPA.PNG','examples/output/exp169_o.PNG','mtcars',169,'plot1 <- mtcars %>% ggvis(~mpg, ~wt)  show_spec(plot1)'),(170,'examples/input/mtcars_QU1ucVe.PNG','examples/output/exp170_o.PNG','mtcars',170,'prop(\"fill\", ~cyl)'),(175,'examples/input/mtcars_a345hK8.PNG','examples/output/exp175_o.PNG','mtcars',175,'props(x = ~mpg, y = ~cyl)'),(178,'examples/input/mtcars_h9JmlmD.PNG','examples/output/exp178_o.PNG','mtcars',178,'plot1 <- mtcars %>% ggvis(~mpg, ~wt)  plot1 %>% set_options(width = 300, height = 200, padding = padding(10, 10, 10, 10))'),(181,'examples/input/mtcars_VQUYwxu.PNG','examples/output/exp181_o.PNG','mtcars',181,'mtcars %>% ggvis(~mpg, ~wt, size := left_right(1, 801, value = 51, step = 50))'),(182,'examples/input/mtcars_5NC3PmR.PNG','examples/output/exp182_o.PNG','mtcars',182,'mtcars %>% ggvis(~mpg, ~wt, opacity :=  up_down(0, 1, value = 0.9, step = 0.05))'),(183,'examples/input/mtcars_LAqRwYZ.PNG','examples/output/exp183_o.PNG','mtcars',183,'plot1 <- mtcars %>% ggvis(~mpg, ~wt)  plot1 %>% set_options(padding = padding(10, 10, 10, 10))'),(187,'examples/input/mtcars_6MdkrAx.PNG','examples/output/exp187_o.PNG','mtcars',187,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_text(text := plot_width())'),(190,'examples/input/mtcars_qCOogFK.PNG','examples/output/exp190_o.PNG','mtcars',190,'mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% add_axis(\"x\", title = \"Weight\", orient = \"top\")'),(191,'examples/input/mtcars_Y7x8WxE.PNG','examples/output/exp191_o.PNG','mtcars',191,'mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% hide_axis(\"x\") %>% hide_axis(\"y\")'),(192,'examples/input/mtcars_XglCWTn.PNG','examples/output/exp192_o.PNG','mtcars',192,'mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% add_legend(\"fill\", title = \"Cylinders\")'),(193,'examples/input/mtcars_ZegUQbu.PNG','examples/output/exp193_o.PNG','mtcars',193,'mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% hide_legend(\"fill\")'),(194,'examples/input/mtcars_bvidLj8.PNG','examples/output/exp194_o.PNG','mtcars',194,'mtcars %>% ggvis(x = ~wt, y = ~mpg, size.brush := 400) %>% layer_points() %>% handle_brush(function(items, page_loc, session, ...) { show_tooltip(session, page_loc$r + 5, page_loc$t, html = nrow(items))})'),(195,'examples/input/mtcars_QFWqOlx.PNG','examples/output/exp195_o.PNG','mtcars',195,'location <- function(location, ...) cat(location$x, \"x\", location$y, \"\\n\")  mtcars %>% ggvis(~mpg, ~wt) %>% layer_points() %>% handle_click(location)'),(196,'examples/input/mtcars_QDNWvo7.PNG','examples/output/exp196_o.PNG','mtcars',196,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_points() %>% handle_hover(function(...) cat(\"over\\n\"), function(...) cat(\"off\\n\"))'),(197,'examples/input/mtcars_D2pkLQ5.PNG','examples/output/exp197_o.PNG','mtcars',197,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_points()'),(198,'examples/input/mtcars_8hqNjQd.PNG','examples/output/exp198_o.PNG','mtcars',198,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_arcs(innerRadius=3,outerRadius=6, startAngle=0,endAngle=0.25 * pi, stroke:=\"white\")'),(199,'examples/input/mtcars_D1YxoXR.PNG','examples/output/exp199_o.PNG','mtcars',199,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_paths()'),(200,'examples/input/mtcars_egH4lzd.PNG','examples/output/exp200_o.PNG','mtcars',200,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_ribbons()'),(201,'examples/input/hec.PNG','examples/output/exp201_o.PNG','hec',201,'hec %>% ggvis(~Hair, ~Eye, fill = ~Freq) %>% layer_rects(width = band(), height = band()) %>% scale_nominal(\"x\", padding = 0, points = FALSE) %>% scale_nominal(\"y\", padding = 0, points = FALSE)'),(202,'examples/input/mtcars_pL6TONu.PNG','examples/output/exp202_o.PNG','mtcars',202,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_text(text:=~mpg)'),(204,'examples/input/exp71_i_flights_FGV9xAq.PNG','examples/output/exp204_o.PNG','nycflights13::flights',204,'flights %>% ggvis(~dest) %>% layer_bars()'),(205,'examples/input/mtcars_XR1RnvR.PNG','examples/output/exp205_o.PNG','mtcars',205,'mtcars %>% ggvis(~wt, ~mpg, stroke = ~factor(cyl)) %>% layer_lines()'),(206,'examples/input/mtcars_5kwahSJ.PNG','examples/output/exp206_o.PNG','mtcars',206,'mtcars %>% ggvis(~factor(cyl), ~mpg) %>% layer_boxplots()'),(207,'examples/input/mtcars_HASXZdd.PNG','examples/output/exp207_o.PNG','mtcars',207,'mtcars %>% ggvis(~mpg) %>% layer_densities()'),(208,'examples/input/mtcars_X3r4XCP.PNG','examples/output/exp_208.PNG','mtcars',208,'mtcars %>% ggvis(~mpg) %>% layer_histograms()'),(209,'examples/input/mtcars_pOoQsDp.PNG','examples/output/exp209_o.PNG','mtcars',209,'mtcars %>% ggvis(~mpg) %>% layer_freqpolys(width = 2)'),(210,'examples/input/mtcars_yeWRCzI.PNG','examples/output/exp210_o.PNG','mtcars',210,'mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_model_predictions(model = \"lm\", domain = c(0, 8))'),(211,'examples/input/mtcars_fUwzq6T.PNG','examples/output/exp211_o.PNG','mtcars',211,'mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths(span = 0.2)'),(212,'examples/input/mtcars_FkSTCVB.PNG','examples/output/exp212_o.PNG','mtcars',212,'mtcars %>% ggvis(~mpg, ~wt) %>% layer_guess()'),(213,'examples/input/mtcars_QJ6ljz4.PNG','examples/output/exp212_o_Xdv1nJi.PNG','mtcars',213,'NULL %>% ggvis(~mpg, ~wt) %>% add_data(mtcars) %>% layer_points()'),(214,'examples/input/mtcars_UHKR7x8.PNG','examples/output/exp214_o.PNG','mtcars',214,'mtcars %>% ggvis() %>% add_props(~wt, ~mpg) %>% layer_points()'),(215,'examples/input/mtcars_BtUAT0q.PNG','examples/output/exp215_o.PNG','mtcars',215,'mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>% layer_points() %>% add_relative_scales()'),(217,'examples/input/mtcars_34Gw15V.PNG','examples/output/exp217_o.PNG','mtcars',217,'mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths(se = input_checkbox(label = \"Confidence interval\"))'),(219,'examples/input/mtcars_CIcKOqW.PNG','examples/output/exp219_o.PNG','mtcars',219,'mtcars %>% ggvis(~wt, ~mpg, fill := input_text(label = \"Point color\", value = \"red\")) %>% layer_bars()'),(220,'examples/input/mtcars_JTE3XCZ.PNG','examples/output/exp220_o.PNG','mtcars',220,'mtcars %>% ggvis(~wt, ~mpg, size :=  input_numeric(label = \"Point size\", value = 25)) %>% layer_points()'),(221,'examples/input/mtcars_Y5ksILF.PNG','examples/output/exp221_o.PNG','mtcars',221,'mtcars %>% ggvis(~wt, ~mpg) %>% layer_model_predictions(model = input_select(choices = c(\"Linear\" = \"lm\", \"LOESS\" = \"loess\"), selected = \"loess\", label = \"Model type\"))'),(222,'examples/input/mtcars_Nffaw51.PNG','examples/output/exp222_o.PNG','mtcars',222,'mtcars %>% ggvis(~wt, ~mpg) %>% layer_model_predictions(model = input_radiobuttons(choices = c(\"Linear\" = \"lm\", \"LOESS\" = \"loess\"), selected = \"loess\", label = \"Model type\"))'),(223,'examples/input/mtcars_rovKoWx.PNG','examples/output/exp223_o.PNG','mtcars',223,'mtcars %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points(fill := input_checkboxgroup(choices = c(\"Red\" = \"r\", \"Green\" = \"g\", \"Blue\" = \"b\"), label = \"Point color components\", map = function(val) {rgb(0.8 * \"r\" %in% val, 0.8 * \"g\" %in% val, 0.8 * \"b\" %in% val)}))'),(225,'examples/input/mtcars_MNKQeoX.PNG','examples/output/exp225_o.PNG','mtcars',225,'mtcars %>% ggvis(~wt, ~mpg, fill = ~hp) %>% layer_points()%>% scale_numeric(\"x\", domain = c(NA, 3), clamp = TRUE, nice = FALSE)'),(227,'examples/input/mtcars_pDpvGg6.PNG','examples/output/exp_227_o.PNG','mtcars',227,'mtcars %>% ggvis(x = ~wt, y = ~mpg, opacity = ~factor(cyl)) %>% layer_points() %>% scale_nominal(\"opacity\", range = c(0.2, 1))'),(229,'examples/input/storms_x8diNTP.PNG','examples/output/exp229_o.PNG','EDAWR::storms',229,'storms %>% ggvis(~date, ~storm) %>% layer_points() %>%  scale_datetime(\"x\", nice = \"year\")'),(231,'examples/input/mtcars_EmPfLkn.PNG','examples/output/exp231_o.PNG','mtcars',231,'lb <- linked_brush(keys = 1:nrow(mtcars), \"red\")  mtcars %>% ggvis(~disp, ~mpg) %>% layer_points(size.brush := 400) %>% lb$input() %>% layer_points(fill := \"red\", data = reactive(mtcars[lb$selected(), ]))'),(235,'examples/input/mtcars_qHBTE04.PNG','examples/output/exp_235_o.PNG','mtcars',235,'mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% group_by(cyl) %>% layer_paths()'),(236,'examples/input/mtcars_AhHi4lO.PNG','examples/output/exp236_o.PNG','mtcars',236,'mtcars %>% ggvis(~disp, ~mpg, stroke = ~factor(cyl)) %>% auto_group() %>% layer_paths()'),(238,'examples/input/mtcars_dsz0k3s.PNG','examples/output/exp237_o.PNG','mtcars',238,'mtcars %>% ggvis(singular(), ~mpg) %>% layer_points()'),(239,'examples/input/exp30_i_x_OW1j4aA.PNG','examples/output/exp239_o_M8w1YU5.PNG','x',239,'vector_type(x)'),(241,'examples/input/exp37_i_y_eTuDoGA.PNG','examples/output/exp241_o.PNG','y',241,'resolution(y, FALSE)'),(242,'examples/input/mtcars_yxARaiu.PNG','examples/output/exp242_o.PNG','mtcars',242,'mtcars %>% compute_count(~cyl, ~wt)'),(243,'examples/input/mtcars_U9qhUWK.PNG','examples/output/exp243_o.PNG','mtcars',243,'mtcars %>% compute_tabulate(~factor(cyl))'),(244,'examples/input/mtcars_PlcI7or.PNG','examples/output/exp244_o.PNG','mtcars',244,'mtcars %>% compute_count(~mpg) %>% compute_align(~x_)'),(245,'examples/input/mtcars_gDvH0i3.PNG','examples/output/exp245_o.PNG','mtcars',245,'mtcars %>% group_by(cyl) %>% compute_bin(~mpg, width = 10)'),(246,'examples/input/mtcars_iWFdNKW.PNG','examples/output/exp246_o.PNG','mtcars',246,'mtcars %>% cbind(count = 1) %>% compute_stack(~count, ~cyl)'),(247,'examples/input/mtcars_eHo3JhM.PNG','examples/output/exp247_o.PNG','mtcars',247,'mtcars %>% compute_density(~mpg, n = 5)'),(248,'examples/input/mtcars_ALtNE6H.PNG','examples/output/exp248_o.PNG','mtcars',248,'mtcars %>% group_by(cyl) %>% compute_boxplot(~mpg)'),(249,'examples/input/mtcars_zSE76lC.PNG','examples/output/exp249_o.PNG','mtcars',249,'mtcars %>% compute_model_prediction(mpg ~ wt, n = 10, se = TRUE)'),(250,'examples/input/mtcars_ngJTggE.PNG','examples/output/exp250_o.PNG','mtcars',250,'mtcars %>% compute_smooth(mpg ~ wt)');
/*!40000 ALTER TABLE `knowledge_base_example` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_rdataset`
--

LOCK TABLES `knowledge_base_rdataset` WRITE;
/*!40000 ALTER TABLE `knowledge_base_rdataset` DISABLE KEYS */;
INSERT INTO `knowledge_base_rdataset` VALUES ('df_comp','A test data frame for complete().','group = c(1:2, 1), item_id = c(1:2, 2), item_name = c(\"a\", \"b\", \"b\"), value1 = 1:3, value2 = 4:6','dataset/df_comp.PNG'),('df_extract','A test data frame for extract().','x = c(NA, \"a-b\", \"a-d\", \"b-c\", \"d-e\")','dataset/df_extract.PNG'),('df_fill','A test data frame for fill()','Month = 1:12, Year = c(2000, rep(NA, 11))','dataset/df_fill.PNG'),('df_sep','A test data frame with multiple values in a cell','x = 1:3, y = c(\"a\", \"d,e,f\", \"g,h\"), z = c(\"1\", \"2,3,4\", \"5,6\"),','dataset/df_sep.PNG'),('df_x','A test data frame.','3 objects of 4 variables.','dataset/df_x.PNG'),('df_x1&df_x2','Combination test data frames.','3 objects of 2 variables','dataset/x1__x2.png'),('df_y','A test data frame with duplicates.','3 objects of 4 variables.','dataset/exp77_i_df_y.PNG'),('EDAWR::pollution','Pollution data from the WHO, 2014. This dataset contains a subset of data from the Ambient Air Pollution Database, WHO, May 2014.','city - Name of city: New York, London, or Beijing; Size - Size of air particulate measured. Fine suspended particles smaller than 10 microns in diameter (large) and 2.5 microns in diameter (small). amount - The mean annual concentration of particles in milligrams per meter cubed (ug/m3).','dataset/pollution.PNG'),('EDAWR::songs&artists','songs - A simple list of pop songs and their authorsartists; \r\nartists - A simple data set of musicians and the instruments they played.','songs - 4 obs. of  2 variables: $ song: chr  \"Across the Universe\" \"Come Together\" \"Hello, Goodbye\" \"Peggy Sue\" $ name: chr  \"John\" \"John\" \"Paul\" \"Buddy\" artists - 4 obs. of  2 variables: $ name : chr  \"George\" \"John\" \"Paul\" \"Ringo\" $ plays: chr  \"sitar\" \"guitar\" \"bass\" \"drums\"','dataset/songs__artists.png'),('EDAWR::storms','Wind speed data for six hurricanes, collected from National Hurricane Center\'s archive of Tropical Cyclone Reports.','storm - Name of hurricane: Alberto, Alex, Allison, Ana, Arlene, Arthur; wind - Maximum wind speed measured for each hurricane (in miles per hour); pressure - Air pressure in the storm\'s center (in millibars); date - Date maximum wind speed was observed.','dataset/storms.PNG'),('hec','A test data frame for ggvis.','hec <- as.data.frame(xtabs(Freq ~ Hair + Eye, HairEyeColor))','dataset/hec.PNG'),('iris','This famous (Fisher\'s or Anderson\'s) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.','iris is a data frame with 150 cases (rows) and 5 variables (columns) named Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, and Species.','dataset/iris.png'),('m','A test vector with a random order.','num[1:7] 5 1 7 9 3 2 4 2',NULL),('mtcars','The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).','A data frame with 32 observations on 11 variables. mpg - Miles/(US) gallon. cyl - Number of cylinders. disp - Displacement (cu.in.). hp - Gross horsepower. drat - Rear axle ratio. wt - Weight (1000 lbs). qsec - 1/4 mile time. vs - V/S. am - Transmission (0 = automatic, 1 = manual). gear - Number of forward gears. carb - Number of carburetors.','dataset/mtcars.PNG'),('nycflights13::flights','On-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013.','Data frame with columns: year,month,day - Date of departure; dep_time, arr_time - Actual departure and arrival times, local tz; sched_dep_time, sched_arr_time - Scheduled departure and arrival times, local tz. dep_delay, arr_delay - Departure and arrival delays, in minutes. Negative times represent early departures/arrivals. hour,minute - Time of scheduled departure broken into hour and minutes. carrier - Two letter carrier abbreviation. tailnum - Plane tail number. flight - Flight number. origin, dest - Origin and destination. air_time - Amount of time spent in the air, in minutes. distance - Distance between airports, in miles. time_hour - Scheduled date and hour of the flight as a POSIXct date. Along with origin, can be used to join flights data to weather data.','dataset/flights.PNG'),('x','A test vector.','int [1:10] -4 -3 -2 -1 0 1 2 3 4 NA',NULL),('y','A test vector with a reverse order.','int [1:5] 5 4 3 2 1',NULL),('z','A test logical vector.','logi [1:6] TRUE TRUE TRUE FALSE FALSE TRUE',NULL);
/*!40000 ALTER TABLE `knowledge_base_rdataset` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_rfunction`
--

LOCK TABLES `knowledge_base_rfunction` WRITE;
/*!40000 ALTER TABLE `knowledge_base_rfunction` DISABLE KEYS */;
INSERT INTO `knowledge_base_rfunction` VALUES (1,'the pipe operator','x %>% f(y); y %>% f(x, ., z)','Pass object on left hand side as first argument (or. argument) of function on right hand side.','dplyr',1),(2,'tbl_df','tbl_df(data_frame)','Converts data to tbl class. tbl\'s are easier to examine than data frames. R displays only the data that fits onscreen.','dplyr',1),(3,'tbl','tbl(data_source, . . . )','Create a table from a data source. ','dplyr',1),(4,'tbl_cube','tbl_cube(dimensions, measures)','A cube tbl stores data in a compact array format where dimension names are not needlessly repeated. \r\nThey are particularly appropriate for experimental data where all combinations of factors are tried\r\n(e.g. complete factorial designs), or for storing the result of aggregations. Compared to data frames,\r\nthey will occupy much less memory when variables are crossed, not nested.','dplyr',1),(5,'src','src(subclass, . . . )','The standard constructor for srcs and is.src() tests.','dplyr',1),(6,'src_mysql','src_mysql(database_name, host = NULL, port = 0L, username = \"root\",\r\npassword = \"\", . . . )','Source for MySQL database backneds.','dplyr',1),(7,'src_postgres','src_postgres(database_name = NULL, host = NULL, port = NULL, user = NULL, password = NULL, . . . )','Source for PostgreSQL database backends.','dplyr',1),(8,'src_sqlite','src_sqlite(path, create = FALSE)','Source for SQLite database backends.','dplyr',1),(9,'sql','sql( . . . )','These functions are critical when writing functions that translate R functions to sql functions. Typically a conversion function should escape all its inputs and return an sql object.','dplyr',1),(10,'copy_to','copy_to(remote_data_source, data_frame, remote_table_name = deparse(substitute(data_frame)), overwrite = FALSE, . . . )','Upload a local data frame into a remote data source, creating the table definition as needed. Wherever possible, the new object will be temporary, limited to the current connection to the source.','dplyr',1),(11,'auto_copy','auto_copy(table_1, table_2, copy = FALSE, . . . )','Copy tables to same source, if necessary.','dplyr',1),(12,'compute','compute(tbl, name = random_table_name(), . . . )','Force computation of a database query and store results in a remote temporary table.','dplyr',1),(13,'collect','collect(tbl, . . . )','Force computation of a database query and retrieve data into a local tibble.','dplyr',1),(14,'collapse','collapse(tbl, . . . )','Force generation of the SQL query. This is sometimes needed to work around bugs in dplyr\'s SQL generation.','dplyr',1),(15,'explain','explain(tbl, . . . ); show_query(tbl, . . . )','Explain details of a tbl. This generic function gives more details about an object than print(), and is more focused on human readable output than str().','dplyr',1),(16,'do','do(tbl, . . . )','Do anything. Thisisageneralpurposecomplementtothespecialisedmanipulationfunctionsfilter(), select(), mutate(), summarise() and arrange(). You can use do() to perform arbitrary computation, returning either a data frame or arbitrary objects which will be stored in a list. This is particularly useful when working with models: you can fit models per group with do() and then flexibly extract components with either another do() or summarise().','dplyr',1),(17,'funs','funs(list_of_functions, .args = list())','Generate a named list of functions for input to other functions.','dplyr',1),(18,'rowwise','rowwise(data_frame)','Group input by rows. It is also useful to support arbitrary complex operations that need to be applied to each row.','dplyr',1),(19,'scoped','scoped','Operate on a selection of variables. The variants suffixed with _if, _at or _all apply an expression (sometimes several) to all variables within a specified subset. This subset can contain all variables (_all variants), a vars() selection (_at variants), or variables selected with a predicate (_if variants).','dplyr',1),(20,'if_else','if_else(condition, true, false, missing = NULL)','Vectorised if. Compared to the base ifelse(), this function is more strict. It checks that true and false are the same type. This strictness makes the output type more predictable, and makes it somewhat faster.','dplyr',1),(21,'case_when','case_when( . . . )','A general vectorised if. This function allows you to vectorise multiple if and else if statements.','dplyr',1),(22,'dr_dplyr','dr_dplyr()','Dr Dplyr checks your installation for common problems.','dplyr',1),(23,'coalesce','coalesce( . . . )','Find first non-missing element.','dplyr',1),(24,'na_if','na_if(vector_1, vector_2)','Convert values to NA. This is a translation of the SQL command NULL_IF. It is useful if you want to convert an annoying value to NA.','dplyr',1),(25,'near','near(vector_1, vector_2, tol = .Machine$double.eps^0.5)','Compare two numeric vectors. This is a safe way of comparing if two vectors of floating point numbers are (pairwise) equal. This is safer than using ==, because it has a built in tolerance','dplyr',1),(26,'ident','ident(a_character_vector)','Flag a character vector as SQL identifiers.','dplyr',1),(27,'order_by','order_by(vector, window_function)','A helper function for ordering window function output.','dplyr',1),(28,'all_equal','all.equal/all_equal(data_frame_1, data_frame_2, ignore_col_order = TRUE, ignore_row_order = TRUE, convert = FALSE, . . . )','Flexible equality comparison for data frames.','dplyr',1),(29,'glimpse','glimpse(data_frame)','Information dense summary of data.','dplyr',2),(30,'group_by','group_by(data_frame, column, add = FALSE )','Group data into rows with the same value of specfic column. add - When add = FALSE, the default, group_by() will override existing groups. To add to the existing groups, use add = TRUE.','dplyr',3),(31,'ungroup','ungroup(data_frame)','Remove grouping information from data frame.','dplyr',3),(32,'group_by_all','group_by_all(tbl, funs = list(), . . . )','Group a data frame by all variables.','dplyr',3),(33,'group_by_at','group_by_at(tbl, .vars, .funs = list(), . . ., .add = FALSE)','Group by a selection of variables.','dplyr',3),(34,'group_by_if','group_by_if(tbl, .predicate, .funs = list(), ..., .add = FALSE)','Group by variables selected with a predicate.','dplyr',3),(35,'groups','groups(tbl)','Return grouping variables (a list of symbols).','dplyr',3),(36,'group_vars','group_vars(tbl)','Return grouping variables (a character vector).','dplyr',3),(37,'select','select(data_frame, column)','Extract existing variables.','dplyr',4),(38,'select_all','select_all(tbl, .funs = list(), . . . )','Select all variables.','dplyr',4),(39,'select_if','select_if(tbl, .predicate, .funs = list(), . . . )','Select a selection of variables by a predicate function.','dplyr',4),(40,'select_at','select_at(tbl, .vars, .funs = list(), . . . )','Select a selecton of variables.','dplyr',4),(41,'vars','vars(variables)','Select variables.','dplyr',4),(42,'all_vars','all_vars(predicate)','Apply the intersection of predicate expressions to all variables.','dplyr',4),(43,'any_vars','any_vars(predicates)','Apply the union of predicate expressions to all variables.','dplyr',4),(44,'pull','pull(table, var = -1)','Pull out a single variable.','dplyr',4),(45,'filter','filter(data_frame, logical criteria)','Extract rows that meet logical criteria.','dplyr',5),(46,'filter_all','filer_all(tbl, vars_predicate)','Filter within all variables.','dplyr',5),(47,'filter_if','filter_if(tbl, predicate, vars_predicate)','Filter within a selection of variables based on predicate functions.','dplyr',5),(48,'filter_at','filter(tbl, vars, vars_predicate)','Filter within a selection of variables based on a list of columns.','dplyr',5),(49,'distinct','distinct(data_frame)','Remove duplicate rows.','dplyr',5),(50,'sample_frac','sample_frac(data_frame, fraction, replace=TRUE/FALSE)','Randomly select fraction of rows.','dplyr',5),(51,'sample_n','sample_n(data_frame, n, replace=TRUE/FALSE)','Randomly select n rows.','dplyr',5),(52,'slice','slice(data_frame, n1:n2)','Select rows by position.','dplyr',5),(53,'top_n','top_n(data_frame, n, column)','Select and order top n entires(by group if grouped data).','dplyr',5),(54,'mutate','mutate(data_frame, new_column=column_1 + column_2)','Compute and append one or more new columns.','dplyr',6),(55,'mutate_all','mutate_all(tbl, function, . . . )','Mutate all columns.','dplyr',6),(56,'mutate_if','mutate_if(tbl, predicate, function, . . . )','Mutate multiple columns for which a predicate returns TRUE.','dplyr',6),(57,'mutate_at','mutate_at(tbl, .vars, function, . . ., .cols = NULL)','Mutate multiple columns using name-based select_helpers.','dplyr',6),(58,'transmute','transmute(data_frame, new_column=column_1 + column_2)','Compute one or more new columns. Drop original columns.','dplyr',6),(59,'transmute_all','transmute_all(tbl, function, . . . )','Transmute','dplyr',6),(60,'transmute_if','transmute_if(tbl, predicate, function, . . . )','Transmute','dplyr',6),(61,'transmute_at','transmute_at(tbl, .vars, function, . . ., .cols = NULL)','Transmute','dplyr',6),(62,'between','between(vector, n1, n2)','Judge if the values from a vector between n1 and n2.','dplyr',7),(63,'cumall','cumall(vector)','Cumulative all.','dplyr',7),(64,'cumany','cumany(vector)','Cumulative any.','dplyr',7),(65,'cummean','cummean(n)','Cumulative mean.','dplyr',7),(66,'lead','lead(vector,n)','Copy with values shifted by 1.','dplyr',7),(67,'lag','lag(vector, n)','Copy with values lagged by 1.','dplyr',7),(68,'row_number','row_number(vector)','Ranks. Ties got to first value.','dplyr',7),(69,'ntile','ntile(vector)','Bin vector into n buckets.','dplyr',7),(70,'min_rank','min_rank(vector)','Ranks. Ties get min rank.','dplyr',7),(71,'dense_rank','dense_rank(vector)','Ranks with no gaps.','dplyr',7),(72,'percent_rank','percent_rank(vector)','Rank rescalrd to [0,1].','dplyr',7),(73,'cume_dist','cume_dist(vector)','Cumulative distribution of values.','dplyr',7),(74,'desc','desc(vector)','Transform a vector into a format that will be sorted in descending order.','dplyr',7),(75,'recode','recode(vector, . . ., default = NULL, missing = NULL)','Recode values.','dplyr',7),(76,'summarise/summarize','summarise/summarize(data_frame, summary_functions)','Summarise data into simgle row of values.','dplyr',8),(77,'summarise_all','summarise_all(tbl, function, . . . )','Summarise and all columns.','dplyr',8),(78,'summarise_if','summarise_if(tbl, predicate, function, . . . )','Summarise and multiple columns for which a predicate returns TRUE.','dplyr',8),(79,'summarise_at','summarise_at(tbl, vars, function, . . ., .cols = NULL)','Summarise and multiple columns using name-based select_helpers.','dplyr',8),(80,'tally','tally(x, wt, sort = FALSE)','Tally observations by group.','dplyr',8),(81,'count','count(data_frame, column_1, wt=column_2)','Count number of rows with each unique value of variable (with or without weights).','dplyr',8),(82,'add_tally','add_tally(tbl, weight, sort = FALSE)','A short-hand for mutate.','dplyr',8),(83,'add_count','add_count(tbl, column, weight = NULL, sort = FALSE)','A short-hand for group_by() and add_tally().','dplyr',8),(84,'first','first(vector)','First value in a vector.','dplyr',9),(85,'last','last(vector)','Last value in a vector.','dplyr',9),(86,'nth','nth(vector)','Nth value in a vector.','dplyr',9),(87,'n','n(vector)','The number of distinct values in a vector.','dplyr',9),(88,'n_distinct','n_distinct(vector)','The number of distinct values in a vector.','dplyr',9),(89,'arrange','arrange(data_frame, column)','Transform a vector into a format that will be sorted in ascending order.','dplyr',10),(90,'arrange_all','arrange_all(tbl, .funs = list(), additional_arguments)','Arrange rows by all variables.','dplyr',10),(91,'arrange_at','arrange_at(tbl, .vars, .funs = list(), additional arguments)','Arrange rows by a list of columns generated by vars().','dplyr',10),(92,'arrange_if','arrange_if(.tbl, .predicate, .funs = list(), additional arguments)','Arrange rows by variables selected using predicate functions.','dplyr',10),(93,'rename','rename(data_frame, column = new_column_name)','Rename the columns of a data frame.','dplyr',10),(94,'rename_all','rename_all(tbl, .funs = list(), . . . )','Rename all variables.','dplyr',10),(95,'rename_if','rename_if(tbl, .predicate, funs = list(), . . . )','Rename columns selected by predicate functions.','dplyr',10),(96,'rename_at','rename_at(tbl, .vars, .funs = list(), . . . )','Rename columns selected by vars().','dplyr',10),(97,'gather','gather(data_frame, \"new_key_column\", \"new_value_column\", n1:n2)','Gather columns into rows. (A key column that contains the former column names while a value column that contains the former column cells.)','tidyr',10),(98,'spread','spread(data_frame, new_column_names, new_column_cells)','Spread rows into columns. (Each unique value in the key column becomes a column name and each value in the value column becomes a cell in the new columns.)','tidyr',10),(99,'separate','separate(data_frame, column, c(\"new_column_1\", \"new_column_2\", \"new_column_3\"))','Separate one column into several. (By default, separate() will split on any non-alpha-numeric characters)','tidyr',10),(100,'separate_rows','separate_rows(data_frame, columns, sep = \".\", convert = FALSE)','Separate a collapsed column into multiple rows','tidyr',10),(101,'unite','unite(data_frame, \"new_column\", column_1, column_2, column_3, sep)','Unite several columns into one. (By default, separator is a underscore.)','tidyr',10),(102,'expand','expand(data_frame, columns)','Expand data frame to include all combinations of values.','tidyr',10),(103,'complete','complete(data, . . ., fill = list())','Complete a data frame with missing combinations of data.','tidyr',10),(104,'extract','extract(data_frame, column, new_column, regex = \".\", remove = TRUE, convert = FALSE, . . . )','Extract one column into multiple columns.','tidyr',10),(105,'nest','nest(data_frame, columns, .key = \"data\")','Nest repeated values in a list-variable.','tidyr',10),(106,'unnest','unnest(data_frame, columns, .drop = NA, .id = NULL, .sep = NULL, .preserve = NULL)','Unnest a list column.','tidyr',10),(107,'uncount','uncount(data_frame, weights_vector, .remove = TRUE, .id = NULL)','\"Uncount\" a data frame.','tidyr',10),(108,'full_seq','full_seq(numeric_vector, period, tol = numeric_tolerance)','Create the full sequence of values in a vector.','tidyr',10),(109,'fill','fill(data_frame, columns, direction = c(\"down\", \"up\"))','Fill in missing values.','tidyr',10),(110,'drop_na','drop_na(data_frame, columns)','Drop rows containing missing values.','tidyr',10),(111,'replace_na','replace_na(data_frame, replace, . . . )','Replace missing values.','tidyr',10),(112,'left_join','left_join(data_frame_1, data_frame_2, by=\"column\")','Join matching rows from the second data frame to the first one.','dplyr',11),(113,'right_join','right_join(data_frame_1, data_frame_2, by=\"column\")','Join matching rows from the first data frane to the second one.','dplyr',11),(114,'inner_join','inner_join(data_frame_1, data_frame_2, by=\"column\")','Join data. Retain only rows in both sets.','dplyr',11),(115,'full_join','full_join(data_frame_1, data_frame_2, by=\"column\")','Join data. Retain all values, all rows','dplyr',11),(116,'semi_join','semi_join(data_frame_1, data_frame_2, by=\"column\")','All rows in first data frame have a match in the second one.','dplyr',11),(117,'anti_join','anti_join(data_frame_1, data_frame_2, by=\"column\")','All rows in first data frame do not have a match in the second one.','dplyr',11),(118,'bind_rows','bind_rows(data_frame_1, data_frame_2)','Append the second data frame to the first as new rows. ','dplyr',11),(119,'bind_cols','bind_cols(data_frame_1, data_frame_2)','Append the second data frame to the first one as new columns. (matchs rows by position)','dplyr',11),(120,'combine','combine(data_frames)','Combine data frames.','dplyr',11),(121,'union','union(data_frame_1, data_frame_2)','Rows that appear in both the first and the second data frame. (The two data frame must contain the same columns.)','dplyr',11),(122,'union_all','union_all(data_frame_1, data_frame_2, . . . )','Rows that appear in both the first and the second data frame with repeat.','dplyr',11),(123,'setequal','setequal(data_frame_1, data_frame_2)','Determine if two sets are equal to each other.','dplyr',11),(124,'intersect','intersect(data_frame_1, data_frame_2)','Rows that appear in both the first and the second data frame. (The two data frame must contain the same columns.)','dplyr',11),(125,'setdiff','setdiff(data_frame_1, data_frame_2)','Rows that apear in the first data frame but not the second one. (The two data frame must contain the same columns.)','dplyr',11),(126,'ggvis','ggvis(data_frame)','Draw a graph (web graphics) with no marks and no properties.','ggvis',12),(127,'ggvisControlOutput','ggvisControlOutput(outputId, plotId = NULL)','Create a ggvis control output element in UI.','ggvis',12),(128,'ggvis_message','ggvis_message(session, type, data = NULL, id = NULL)','Send a message to ggvis running on client.','ggvis',12),(129,'explain.ggvis','explian(vis, . . . )','Print out the structure of a ggvis object in a friendly format.','ggvis',12),(130,'shiny-ggvis','bind_shiny(vis, plot_id, controls_id = NULL, . . ., session = shiny::getDefaultReactiveDomain())  bind_shiny_ui(vis, controls_id, session = shiny::getDefaultReactiveDomain())  ggvisOutput(plot_id = rand_id(\"plot_id\"))','Connect a ggvis graphic to a shiny app.','ggvis',12),(131,'waggle','waggle(min, max, value = (min + max)/2, step = (max - min)/50, fps = 10)','Waggle back and forth between two numbers.','ggvis',12),(132,'get_data','get_data(vis)','Get data from a ggvis object.','ggvis',12),(133,'export_png','export_png/svg(vis, file = NULL)','Export a PNG or SVG from a ggvis object.','ggvis',12),(134,'show_tooltip','show_tooltip(session, l = 0, t = 0, html = \"\")','Send a message to the client to show.','ggvis',12),(135,'hide_tooltip','hide_tooltip(session)',' Hide a tooltip.','ggvis',12),(136,'show_spec ','show_spec(vis, pieces = NULL)','Print out the vega plot specification.','ggvis',12),(137,'prop','prop(property, x, scale=NULL, offset=NULL, mult=NULL, env=parent.frame(), event=NULL, label=NULL); is.prop(x); is.prop_constant(x); is.prop_variable(x); is_prop_reactive(x)','Display the data with points with properties x, y, shape, stroke, fill, strokeOpacity, fillOpacity, and opacity. ','ggvis',13),(138,'props','props(vega_properties, .props=NULL, inherit=TRUE, env=parent.frame()); is.ggvis_props(x)','Provide a tool for concise creation of prop objects using a set of conventions designed to capture the most common use cases. \r\nIf the values are not already objects of class prop, props uses the following heuristics to when creating the prop: atomic vectors, e.g. x=1: scaled=FALSE; an interative input, e.g. x=input_slider: scaled=FALSE; a formula containing a single value, e.g.x ~ 1: scaled=TRUE; a formula containing a name or expression, x ~ mpg: scaled=TRUE. props uses non-standard evaluation in a slightly unusual way: if you provide a formula input, the LHS of the formula will provide the name of the component. You can combine variables from the dataset and variables defined in the local environment: expressions will be evaluated in the environment which the formula was defined. \r\nThere are four different property events that the marks can use. enter: This event is used by marks when they are added to a plot. update: This event is used by marks after they have entered, and also after they have been hoverd over. exit: This event is used by marks as they are removed from a plot. hover: This event is used when the mouse cursor is over the mark. \r\nThe following mark properties: \r\nx - The first (typically left-most) x-coordinate; \r\nx2 - The second (typically right-most) x-coordinate; \r\nwidth - The width of the mark (if supported); \r\ny - The first (typically top-most) y-coordinate; \r\ny2 - The second (typically bottom-most) y-coordinate; \r\nheight - The height of the mark (if supported); \r\nopacity - The overall opacity. fill - The fill color; \r\nfillOpacity - The fill opacity; \r\nstroke - The stroke color; \r\nstrokeWidth - The stroke width, in pixels; \r\nstrokeOpacity - The stroke opacity; \r\nsize[symbol] - The pixel area of the symbol. For example in the case of circles, the radius is determined in part by the square root of the size value; \r\nshape[symbol] - The symbol shape to use. One of circle (default), square, cross, diamond, triangle-up, or triangle-down (symbol only); \r\ninnerRadius[arc] - The inner radius of the arc, in pixels; \r\nouterRadius[arc] - The outer radius of the arc, in radius; \r\nstartAngle[arc] - The start angle of the arc, in radians; \r\nendAngle[arc] - The end angle of the arc, in radians; \r\ninterpolate[area, line] - The linne interpolation method to use. One of linear, step-before, step-after, basis, basis-open, cardinal, cardinal-open, monotone; \r\ntension[area, line] - Depending on the interpolation type, sets the tension parameter; \r\nurl [image] - The URL from which to retrieve the image; \r\nalign[image, text] - The horizontal alignment of the object. One of left, right, center; \r\nbaseline[image, text] - The vertical alignment of the object. One of top, middle, bottom; \r\ntext[text] - The text to display; \r\ndx[text] - The horizontal margin, in pixels, between the text label and its anchor point. The value is ignored if the align property is center; \r\ndy[text] - The vertical margin, in pixels, between the text label and its anchor point. The value is ignored if the baseline property is middle; \r\nangle[text] - The rotation angle of the text, in degrees; \r\nfone[text] - The typeface to set the text in (e.g., Helvetica Neue); \r\nfontSize[text] - The font size, in pixels; \r\nfontWeight[text] - The font weight (e.g., bold); \r\nfontStyle[text] - The font style (e.g., italic);  \r\nEach property can be assigned by property object or in a parent layer.','ggvis',13),(139,'prop_domain','prop_domain(property, data_set)','Property domain..','ggvis',13),(140,'set_options ','set_options(vis, width = NULL, height = NULL, keep_aspect = NULL,\r\nresizable = NULL, padding = NULL, duration = NULL, renderer = NULL,\r\nhover_duration = NULL)','Set options for a ggvis plot.','ggvis',13),(141,'set_scale_label','set_scale_label(vis, scale, label)','Set the label for a scale','ggvis',13),(142,'scaled_value','scaled_value(scale, value)','Create a scaled_value object.','ggvis',13),(143,'left_right/up_down','left_right/up_down(min, max, value = (min + max)/2, step = (max - min)/40)','Interactive inputs bound to arrow keys.','ggvis',13),(144,'padding','padding(top = NULL, right = NULL, bottom = NULL, left = NULL)','Define padding.','ggvis',13),(145,'band','band(offset = NULL, mult = NULL)','Bands are used to set the width or height on categorical scales - a band represent the height or width allocated for one level of a factor.','ggvis',13),(146,'handle_resize','handle_resize(vis, on_resize)','Handlers plot sizing.','ggvis',13),(147,'plot_width','plot_width(vis)','Interactive inputs for plot width.','ggvis',13),(148,'plot_height','plot_height(vis)','Interactive inputs for plot height.','ggvis',13),(149,'axis_props','axis_props(ticks = NULL, majorTicks = NULL, minorTicks = NULL, grid = NULL, labels = NULL, title = NULL, axis = NULL)','Create an axis_props object for controlling axis properties.','ggvis',13),(150,'add_axis','add_axis(vis, type, properties = NULL)','Add a vega axis specification to a ggvis plot.','ggvis',13),(151,'hide_axis','hide_axis(vis, scale)','Hide a vega axis.','ggvis',13),(152,'add_legend','add_legend(vis, scales = NULL, orient = \"right\", title = NULL, format = NULL, values = NULL, properties = NULL)','Add a vega legend specification to a ggvis plot.','ggvis',13),(153,'hide_legend','hide_legend(vis, scales)','Hide a vega legend specification to a ggvis plot.','ggvis',13),(154,'handle_brush','handle_brush(vis, on_move = NULL, fill = \"black\")','Handle brush events on a visualisation.','ggvis',13),(155,'handle_click','handle_click(vis, on_click = NULL)','Handle mouse clicks on marks.','ggvis',13),(156,'handle_hover','handle_hover(vis, on_mouse_over = NULL, on_mouse_out = NULL)','Handle mouse hovers on marks.','ggvis',13),(157,'layer_points','layer_points(vis, visual_properties, data=NULL)','Display the data with points with properties x, y, shape, stroke, fill, strokeOpacity, fillOpacity, and opacity.','ggvis',14),(158,'layer_arcs','layer_arcs(vis, visual_properties, data=NULL)','Display the data with arcs. The arc layer increase some new features such as innerRadius, outerRadius, startAngle and endAngle.','ggvis',14),(159,'layer_paths','layer_paths(vis, visual_properties, data=NULL)','Display the data with paths. visual_properties -  A props object, named according to the properties of ggvis.','ggvis',14),(160,'layer_ribbons','layer_ribbons(vis, visual_properties, data=NULL)','Display the data with ribbons. visual_properties -  A props object, named according to the properties of ggvis.','ggvis',14),(161,'layer_rects','layer_rects(vis, visual_properties, data=NULL)','Display the data with rectangles. visual_properties -  A props object, named according to the properties of ggvis.','ggvis',14),(162,'layer_text','layer_text(vis, visual_properties, data=NULL)','Display the data with text. The text layer has many new options to control the apperance of the text: text (the label), dx and dy (margin in pixels between text and anchor point), angle (rotate the text), font (font name), fontSize (size in pixels), fontWeight (e.g. bold or normal), fontStyle (e.g. italic or normal.)','ggvis',14),(163,'layer_images','layer_images(vis, visual_properties, data=NULL)','Display data with images. The image layer includes new propertites named url, align and baseline. (Align and baseline are also used in the text layer.)','ggvis',14),(164,'layer_bars','layer_bars(vis, visual_properties, stack=TRUE, width=NULL)','Add bars to a plot. The exact behavior is complicated because the term bar chart is used to describe four important varitions on a theme. The action of layer_bars depends on two factors: whether or not a y prop has been specified, and whether the x props is continuous or categorical. stack - If there are multiple bars to be drawn at an x location, should the bars be stacked? If FALSE, the bars will be overplotted on each other. width - Width of each bar. When x is continuous, this controls the width in the same units as x. When x is categorical, this controls the width as a proportion of spacing between itens (default is 0.9). If no y prop has been specified, then this will count the number of entires at each unique x value. There will be one bar at each unique x value, and the y value (or height) of each bar will represent the count at that x value. If a y prop has been specified, then those y values will be used as weights for a weighted count at each unique x value. If no x values appear more than once in the data, then the end result is a plot where the height of the bar at each x value is simple the y value. However, if an x value appear more than once in the data, then this will sum up the y values at each x. If the x variable is continuous, then a continuous x axis will be used, and the width of each bar is by default equal to the resolution of the items.','ggvis',14),(165,'layer_lines','layer_lines(vis, visual_properties)','Sort the data on the x varible and the line will always proceed from left to right','ggvis',14),(166,'layer_boxplots','layer_boxplots(vis, visual_properties, coef=1.5, width=NULL)','Add boxplots to a plot. The action of layer_boxplots depends on whether the x prop is continuous or categorical. coed - The maximum length of the whiskers as multiple of the inter-quartile range. Default value is 1.5. width - Width of each bar. When x is continous, this controls the width in the same units as x. When x is categorical, this controls the width as a proportion of the spacing between items (default is 0.9). The upper and lower \\\"hinges\\\" correspond to the first and third quartiles (the 25th and 75th percentiles). This differs slightly from the method used by the boxplot function, and may be apparent with small sample. The upper whisker extends from the hinge to the highest value that is within 1.5*IQR of the hinge, where IQR is the inter-quartile range, or distance between the first and third quartiles. The lower whisker extends from the hinge to the lowest value within 1.5*IQR of the hinge. Data beyond the end of the whiskers are outliers and plotted as points (as specified by Tukey).','ggvis',14),(167,'layer_densities','layer_densitied(vis, visual_properies, kernel=\"gaussian\", adjust=1, density_args=list(), area=TRUE)','Combine transform_density with mark_path and mark_area to display a smooth line and its standard error. kernel - Smoothing kernel. This must partially match one of \"gaussian\", \"rectangular\", \"triangular\", \"epanechnikov\", \"biweight\", \"cosine\" or \"optcosine\", with default \"gaussian\", and may be abbreviated to a unique prefix (single letter). adjust - Multiple the default bandwidth by this amount. Useful for controlling wiggliness of density. density_args - Other arguments passed on to compute_density and thence to density. area - Should there be a shaded region drawn under the curve?','ggvis',14),(168,'layer_histograms','layer_histograms(vis, visual_properties, width=NULL, center=NULL, boundary=NULL,\\r\\n  closed=c(\\\"right\\\", \\\"left\\\"), stack=TRUE, binwidth)','Display binned data. width - The width of the bins. The default is NULL, which yields 30 bins that cover the range of the data. This value should always be overrided for exploring multiple widths to find the best to illustrate the stories in the data. center - The center of one of the bins. If center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for examples, use width=1 and center=0, even if 0 is outside the range od the data. At most one of center and boundary may be specified. boundary - A boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers use width=1 and boundary=0.5, even if 1 is outside the range of the data. Ar most one of center and boundary may be specified. closed - One of \"right\" or \"left\" indicating whether right or left edges of bins are included in the bin. stack - If TRUE, will automatically stack overlapping bars. binwidth - Deprecated; use width instead.','ggvis',14),(169,'layer_freqploys','layer_freqpolys(vis, visual_properties, width = NULL, center = NULL, boundary = NULL, closed = c(\"right\", \"left\"), binwidth)','Display binned data. The properties are same as layer_histograms().','ggvis',14),(170,'layer_model_predictions','layer_model_predictions(vis, visual_properties, model, formula=NULL, model_args=NULL, se=FALSE, domain=NULL)','Fits a model to the data and draw it with layer_paths and layer_ribbons. Visual properties includes stroke properties, which control only affect line and fill properties only affect standard error band. model - Name of the model as a string, e.g. \" loess\", \"lm\", or \"MASS : : rlm\". Must be the name of a function that produces a standard model object with a predict method. formula - Model formula. If not supplied, guessed from the visual properties, constructing y ~ x. model_args - A list of additional arguments passed on to the model function. se - Also display a point-wise standard error band? Defaults to FALSE because interpretation is non-trivial. domain - If NULL (the default), the domain of the predicted values will be the same as the domain of the prediction variable in the data. It can also be a two-element numeric vector specifying the min and max.','ggvis',14),(171,'layer_smooths','layer_smooths(vis, visual_properties, span=0.75, se=FALSE)','A special case of layering model predictions where the model is a smooth loess curve whose smoothness is controlled by the span parameter. span - For layer_smooth, the span of the loess smoother. layer_smooths contains the same visual properties and se with layer_model_predictions.','ggvis',14),(172,'layer_guess','layer_guess(vis, . . . )','Guess the right type of layer based on current properties.','ggvis',14),(173,'add_data','add_data(vis, data, name = deparse2(substitute(data)), add_suffix = TRUE)','Add dataset to a visualisation.','ggvis',15),(174,'add_props','add_props(vis, ..., .props = NULL, inherit = NULL, env = parent.frame())','Add visual properties to a visualisation.','ggvis',15),(175,'add_relative_scales','add_relative_scales(vis)','Add x_rel and y_rel scales.','ggvis',15),(176,'add_tooltip','add_tooltip(vis, html, on = c(\"hover\", \"click\"))','Add tooltips to a plot.','ggvis',15),(177,'input_checkbox','input_checkbox(value = FALSE, label = \"\", id = rand_id(\"checkbox_\"), map = identity)','Create an interactive checkbox.','ggvis',15),(178,'input_slider','input_slider(min, max, value = (min + max)/2, step = NULL, round = FALSE, format = NULL, locale = \"us\", ticks = TRUE, animate = FALSE, sep = \",\", pre = NULL, post = NULL, label = \"\", id = rand_id(\"slider_\"), map = identity)','Create an interactive slider.','ggvis',15),(179,'input_text','input_text(value, label = \"\", id = rand_id(\"text_\"), map = identity)','Create an interactive text.','ggvis',15),(180,'input_numeric','input_numeric(value, label = \"\", id = rand_id(\"numeric_\"), map = identity)','Create a numeric input box.','ggvis',15),(181,'input_select','input_select(choices, selected = NULL, multiple = FALSE, label = \"\", id = rand_id(\"select_\"), map = identity, selectize = FALSE)','Create interactive control to select one (or more options) from a list.','ggvis',15),(182,'scales','scales()','Add a scale to a ggvis plot.','ggvis',15),(183,'scale_numeric','scale_numeric(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, trans = NULL, clamp = NULL, exponent = NULL, nice = NULL, zero = NULL, expand = NULL, name = property, label = NULL, override = NULL)','Add a numeric scale to a ggvis object.','ggvis',15),(184,'scale_ordinal','scale_ordinal(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, points = NULL, padding = NULL, sort = NULL, name = property, label = NULL, override = NULL)','Add a ordinal scale to a ggvis object.','ggvis',15),(185,'scale_nominal','scale_nominal(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, points = NULL, padding = NULL, sort = NULL, name = property, label = NULL, override = NULL)','Add a nominal scale to a ggvis object.','ggvis',15),(186,'scale_logical','scale_logical(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, points = NULL, padding = NULL, sort = NULL, name = property, label = NULL, override = NULL)','Add a logical scale to a ggvis object.','ggvis',15),(187,'scale_datetime','scale_datetime(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, utc = NULL, clamp = NULL, nice = NULL, expand = NULL, name = property, label = NULL, override = NULL)','Add a date-time scale to a ggvis object.','ggvis',15),(188,'legend_props','legend_props(title = NULL, labels = NULL, symbols = NULL, gradient = NULL, legend = NULL)','Create an axis_props object for controlling legend properties.','ggvis',15),(189,'linked_brush','linked_brush(keys, fill = \"red\")','Create a linked brush object.','ggvis',15),(190,'sidebarBottomPage','sidebarBottomPage(sidebarPanel, mainPanel, shiny_headers = TRUE)','Create a page with a sidebar.','ggvis',15),(191,'group_by','group_by(vis, . . ., add = FALSE)','Divide data into groups.','ggvis',16),(192,'auto_group','auto_group(vis, exclude = NULL)','Automatically group data by grouping variables.','ggvis',16),(193,'is.broker','is.broker(object)','Determine if an object is a broker object.','ggvis',17),(194,'singular','singular()','Use singular when you want constant x or y position.','ggvis',17),(195,'vector_type','vector_type(vector)','Determine the \"type\" of a vector.','ggvis',17),(196,'zero_range','zero_range(x, tol = .Machine$double.eps * 100)','Determine if range of vector is close to zero, with a specified tolerance.','ggvis',17),(197,'resolution','resolution(numeric_vector, zero = TRUE)','Compute the \"resolution\" of a data vector.','ggvis',17),(198,'compute_count','compute_count(x, x_var, w_var = NULL)','Count data at each location.','ggvis',17),(199,'compute_tabulate','compute_tabulate(x, x_var, w_var = NULL)','Count data at each location of a categorical variable.','ggvis',17),(200,'compute_align','compute_align(x, var, length = NULL, align = 0.5, dir = \"x\")','Align positions using length.','ggvis',17),(201,'compute_bin','compute_bin(x, x_var, w_var = NULL, width = NULL, center = NULL, boundary = NULL, closed = c(\"right\", \"left\"), pad = FALSE, binwidth)','Bin data along a continuous variable.','ggvis',17),(202,'compute_stack','compute_stack(x, stack_var = NULL, group_var = NULL)','Stack overlapping data.','ggvis',17),(203,'compute_density','compute_density(x, x_var, w_var = NULL, kernel = \"gaussian\", trim = FALSE, n = 256L, na.rm = FALSE, ...)','Compute density of data.','ggvis',17),(204,'compute_boxplot','compute_boxplot(x, var = NULL, coef = 1.5)','Calculate boxplot values.','ggvis',17),(205,'compute_model_prediction','compute_model_prediction(x, formula, . . ., model = NULL, se = FALSE, level = 0.95, n = 80L, domain = NULL, method)','Create a model of a data set and compute predictions.','ggvis',17),(206,'compute_smooth','compute_smooth(x, formula, . . ., span = 0.75, se = FALSE)','Create a model of a data set and compute predictions.','ggvis',17);
/*!40000 ALTER TABLE `knowledge_base_rfunction` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_rpackage`
--

LOCK TABLES `knowledge_base_rpackage` WRITE;
/*!40000 ALTER TABLE `knowledge_base_rpackage` DISABLE KEYS */;
INSERT INTO `knowledge_base_rpackage` VALUES ('dplyr','A package that helps transform tabular data. dplyr provides a flexible grammar of data manipulation. It’s the next iteration of plyr, focused on\r\ntools for working with data frames (hence the d in the name). It has three main goals:  Identify the most important data manipulation verbs and make them easy to use from R.  Provide blazing fast performance for in-memory data by writing key pieces in C++ (using\r\nRcpp) Use the same interface to work with data no matter where it’s stored, whether in a data frame,\r\na data table or database.'),('ggvis','A package that visualizes data. An implementation of an interactive grammar of graphics, taking the\r\nbest parts of \'ggplot2\', combining them with the reactive framework of\r\n\'shiny\' and drawing web graphics using \'vega\'. '),('tidyr','A package that reshapes the layout of tables. An evolution of \'reshape2\'. It\'s designed specifically for data\r\ntidying (not general reshaping or aggregating) and works well with\r\n\'dplyr\' data pipelines.');
/*!40000 ALTER TABLE `knowledge_base_rpackage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `knowledge_base_usage`
--

LOCK TABLES `knowledge_base_usage` WRITE;
/*!40000 ALTER TABLE `knowledge_base_usage` DISABLE KEYS */;
INSERT INTO `knowledge_base_usage` VALUES (1,'x %>% f(y) is the same as f(x, y); y%>% f(x, . , z) is the same as f(x, y, z)','\"Piping\" with %>% makes code more readable.',1),(2,'tbl_df(data_frame)','Basic usage',2),(3,'tbl(src, . . . )','src - A data source;\r\n. . . - Other arguments passed on the individual methods.',3),(4,'is. tbl(x)','Determine if an object is a tbl;\r\nx - an object to coerce to a tbl.',3),(5,'as. tbl(x, . . . )','x- an object to coerce to a tbl;\r\n. . . - Other arguments passed on the individual methods.',3),(6,'tbl_cube(dimensions, measures)','dimensions - A named list of vectors. A dimension is a variable whose values are known before the experiment is conducted; they are fixed by design (in reshape2 they are known as id variables). tbl_cubes are dense which means that almost every combination of the dimensions should have associated measurements: missing values require an explicit NA, so if the variables are nested, not crossed, the majority of the data structure will be empty. Dimensions are typically, but not always, categorical variables; \r\nmeasures - A named list of arrays. A measure is something that is actually measured, and is not known in advance. The dimension of each array should be the same as the length of the dimensions. Measures are typically, but not always, continuous values. ',4),(7,'as. tbl_cube(x, . . . )','x - An object to convert. Built in methods will convert arrays, tables and data frames;\r\n. . . - Passed on to individual methods; otherwise ignored.',4),(8,'as. tbl_cube(x, dim_names = names(dimnames(x)), \r\nmet_name = deparse(substitute(x)), . . . )','S3 method for class \'array\';\r\ndim_names - Names of dimensions;\r\nmet_name - A string to use as the name for the measure the dimnames().',4),(9,'as. tbl_cube(x, dim_names = names(dimnames(x)), \r\nmet_name = \"Freq\", . . . )','S3 method for class \'table\'.',4),(10,'as. tbl_cube(x, dim_names = names(dimnames(x)),','S3 method for class \'table\'.',4),(11,'as. tbl_cube(x, dim_names = names(dimnames(x)),','S3 method for class \'matrix\'.',4),(12,'as. tbl_cube(x, dim_names = NULL, met_name = guess_met(x), . . . )','S3 method for class \'data.frame\'.',4),(13,'src (subclass, . . . )','subclass - name of subclass. \"src\" is an abstract base class, so you must supply this value. src_ is automatically prepended to the class name;\r\n. . . - fields used by object. These dots are evaluated with explicit splicing.',5),(14,'is. src(x)','x - Object to test for \"src\"-ness.',5),(15,'src_mysql(dbname, host = NULL, port = 0L, username = \"root\", password = \"\", . . . )','dbname - Database name;\r\nhost, port - Host name and port number of database;\r\n. . . - for the src, other arguments passed on to the underlying database connector, DBI::dbConnect(). For the tbl, included for compatibility with the generic, but otherwise ignored;\r\nusername, password - User name and password. Generally, you should avoid saving username and password in your scripts as it is easy to accidentally expose valuable credentials. Instead, retrieve them from environment variables, or use database specific credential scores. With MySQL you can set up my.cnf as described in RMySQL::MySQL().',6),(16,'src_postgres(dbname = NULL, host = NULL, port = NULL, user = NULL, password = NULL, . . . )','user,  password - User name and password. Generally, you should avoid saving username and password in your scripts as it is easy to accidentally expose valuable credentials. Instead, retrieve them from environment variables, or use database specific credential scores.',7),(17,'src_sqlite(path, create = FALSE)','path - Path to SQLite database. You can use the special path \":memory:\" to create a temporary in memory database.\r\ncreate - if FALSE, path must already exist. If TRUE, will create a new SQLite3 database at path if path does not exist and connect to the existing database if path does exist.',8),(18,'sql( . . . )','. . . - Character vectors that will be combined into a single SQL expression.',9),(19,'copy_to(dest, df, name = deparse(substitute(df)), overwrite = FALSE, . . . )','dest - Remote data source;\r\ndf - Local data frame;\r\nname - Name for new remote table;\r\noverwrite - If TRUE, will overwrite an existing table with name name; If FALSE, will throw an error if name already exists;\r\n. . . - Other parameters passed to methods.',10),(20,'auto_copy(x, y, copy = FALSE, . . . )','x, y - y will be copied to x, if necessary;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\n. . . - Other arguments passed on to methods.',11),(21,'compute(x, name = random_table_name(), . . . )','x - A tbl;\r\nname - Name of temporary table on database;\r\n. . . - Other arguments passed on to methods.',12),(22,'collect(x, . . . )','x - A tbl;\r\n. . . - Other arguments passed on to methods.',13),(23,'collapse(x, . . . )','x - A tbl;\r\n. . . - Other arguments passed on to methods.',14),(24,'explain(x, . . . )','x - An object to explain (invisibly);\r\n. . . - Other parameters possibly used by generic.',15),(25,'show_query(x, . . . )','x - An object to explain (invisibly);\r\n. . . - Other parameters possibly used by generic.',15),(26,'do(.data, . . . )','.data - a tbl;\r\n. . . - Expressions to apply to each group. If named, results will be stored in a new column. If unnamed, should return a data frame. You can use . to refer to the current group. You can not mix named and unnamed arguments;\r\nFor an empty data frame, the expressions will be evaluated once, even in the presence of a grouping. This makes sure that the format of the resulting data frame is the same for both empty and non-empty input.\r\ndo() always returns a data frame. The first columns in the data frame will be the labels, the others will be computed from . . . . Named arguments become list-columns, with one element for each group; unnamed elements must be data frames and labels will be duplicated accordingly. Groups are preserved for a single unnamed input. This is different to summarise() because do() generally does not reduce the complexity of the data, it just expresses it in a special way. For multiple named inputs, the output is grouped by row with rowwise(). This allows other verbs to work in an intuitive way.\r\nIf you’re familiar with plyr, do() with named arguments is basically equivalent to plyr::dlply(), and do() with a single unnamed argument is basically equivalent to plyr::ldply(). However, instead of storing labels in a separate attribute, the result is always a data frame. This means that summarise() applied to the result of do() can act like ldply().',16),(27,'funs(. . ., .args=list())','. . . - A list of functions specified by: Their name, \"mean\"; The function itself, mean; A call to the function with . as a dummy argument, mean(. , na.rm = TRUE). These arguments are automatically quoted. They support unquoting and splicing. The following notations are not supported. For example,  An anonymous function, function(x) mean(x, na.rm = TRUE); An anonymous function in purrr notation, ~mean(., na.rm = TRUE);\r\n.args, args - A named list of additional arguments to be added to all function calls.',17),(28,'rowwise(data)','data - Input data frame.',18),(29,'scoped','There are three kinds of scoped variants. They differ in the scope of the variable selection on which operations are applied: Verbs suffixed with _all() apply an operation on all variables. Verbs sufficed with _at() apply an operation on a subset of variables specified with the quoting function vars(). This quoting function accepts tidyselect::vars_select() helpers like starts_with(). Instead of a vars() selection, you can also supply an integerish vector of column positions or a character vector of column names. Verbs suffixed with _if() apply an operation on the subset of variables for which a predicate function returns TRUE. Instead of a predicate function, you can also supply a logical vector.',19),(30,'if_else(condition, true, false, missing = NULL)','condition - Logical vector;\r\ntrue, false - Values to use for TRUE and FALSE values of condition. They must be either the same length as condition, or length 1. They must also be the same type: if_else() checks that they have the same type and same class. All other attributes are taken from true;\r\nmissing - If not NULL, will be used to replace missing values;\r\nWhere condition is TRUE, the matching value from true, where it\'s FALSE, the matching value from false, otherwise NA.',20),(31,'case_when( . . . )','. . . - A sequence of two-sided formulas. The left hand side (LHS) determines which values match this case. The right hand side (RHS) provides the replacement value. The LHS must evaluate to a logical vector. The RHS does need to be logical, but all RHSs must evaluate to the same type of vector. Both LHS and RHS may have the same length of either 1 or n. The value of n must be consistent across all cases. The case of n == 0 is treated as a variant of n != 1.',21),(32,'dr_dplyr()','Only run this if you are seeing problems, like random crashes. It’s possible for dr_dplyr to return false positives, so there’s no need to run if all is ok.',22),(33,'coalesce( . . . )','. . . - Vectors. All inputs should either be length 1, or the same length as the first argument.',23),(34,'na_if(x, y)','x - Vector to modify;\r\ny - Value to replace with NA;\r\nA modified version of x that replaces any values that are equal to y with NA.',24),(35,'near(x, y, tol = .Machine$double.eps^0.5)','x, y - Numeric vectors to compare;\r\ntol - Tolerance of comparison.',25),(36,'ident( . . . )','. . . - A character vector, or name-value pairs.\r\nident() takes unquoted strings and flags them as identifiers. ident_q() assumes its input has already been quoted, and ensures it does not get quoted again. This is currently used only for for schema.table.',26),(37,'order_by(order_by, call)','order_by - A vector to order_by;\r\ncall - A function call to a window function, where the first argument is the vector being operated on.',27),(38,'all_equal(target, current, ignore_col_order = TRUE, ignore_row_order = TRUE, convert = TRUE)','target, current - Two data frames to compare;\r\nignore_col_order - Should order of columns be ignored?\r\nignore_row_order - Should order of rows be ignored?\r\nconvert  - Should similar classes be converted? Currently this will convert factor to character and integer to double;\r\n. . . - Ignored. Needed for compatibility with all.equal().',28),(39,'glimpse(x, width = NULL, . . . )','x - An object to glimpse at;\r\nwidth - Width of output: defaults to the setting of the option tibble.width (if finite) or the width of the console;\r\n. . . - Other arguments passed on to individual methods.',29),(40,'data_frame %>% group_by(column) %>% summarise(summary_functions)','Compute separate summary row for each group.',30),(41,'data_frame %>% group_by(column) %>% mutate(...)','Compute new variables by group.',30),(42,'group_by_all(.tbl, .funs = list(), . . . )','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambdafunctions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula.\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',32),(43,'group_by_at(.tbl, .vars, .funs = list(), . . ., .add = FALSE)','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(),  or a character vector of function names, or simply a function.\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL.\r\n.add - Passed to the add argument of group_by().',33),(44,'group_by_if(.tbl, .predicate, .funs = list(), . . ., .add = FALSE)','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support;\r\n.add - Passed to the add argument of group_by().\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names.',34),(45,'groups(x)','x - A tbl().',35),(46,'group_vars(x)','x - A tbl().',36),(47,'select(data_frame, column)','Select columns by names.',37),(48,'select(data_frame, -column)','Select everything except specific column.',37),(49,'select(data_frame, column_1: column_2)','Select columns between two columns (inclusive).',37),(50,'select(data_frame, contains(\".\"))','Select columns whose name contains a chatacter string.',37),(51,'select(data_frame, ends_with(\".\"))','Select columns whose name ends with a character string.',37),(52,'select(data_frame, everything())','Select every column.',37),(53,'select(data_frame, matches(\".\"))','Select columns whose name matches a regular expression.',37),(54,'select(data_frame, num_range(\"x\",1:5))','Select columns named x1, x2, x3, x4, x5.',37),(55,'select(data_frame, one_of(c(\"column_1\", \"column_2\")))','Select columns whose names are in a group of names.',37),(56,'select(data_frame, starts_with(\".\"))','Select columns whose name starts with a character string.',37),(57,'select_all(.tbl, .funs = list(), . . . )','.tbl - A tbl object;\r\n.funs - A single expression quoted with funs() or within a quosure, a string naming a function, or a function;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',38),(58,'select_if(.tbl, .predicate, .funs = list(), . . . )','.tbl - A tbl object;\r\n.funs - A single expression quoted with funs() or within a quosure, a string naming a function, or a function;\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names.\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',39),(59,'select_at(.tbl, .predicate, .funs = list(), . . . )','.tbl - A tbl object;\r\n.var - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL;\r\n.funs - A single expression quoted with funs() or within a quosure, a string naming a function, or a function.',40),(60,'vars( . . . )','. . . - Variables to include/exclude in mutate summarise. You can use same specifications as in select(). If missing, defaults to all non-grouping variables. These arguments are automatically quoted and later evaluated in the context of the data frame. They support unquoting. See vignette(\"programming\") for an introduction to these concepts.',41),(61,'all_vars(expr)','expr - A predicate expression. This variable supports unquoting and will be evaluated in the context of the data frame. It should return a logical vector. This argument is automatically quoted and later evaluated in the context of the data frame.',42),(62,'any_vars(expr)','expr - A predicate expression. This variable supports unquoting and will be evaluated in the context of the data frame. It should return a logical vector. This argument is automatically quoted and later evaluated in the context of the data frame.',43),(63,'pull(.data, var = -1)','.data - A table of data;\r\nvar - A variable specified as: a literal variable name; a positive integer, giving the position counting from the left; a negative integer, giving the position counting from the right. The default returns the last column (on the assumption that\'s the column you\'ve created most recently).',44),(64,'filter(data_frame,  column < n)','Extract rows that numbers in a column are less than a specific number.',45),(65,'filter(data_frame,  column > n)','Extract rows that numbers in a column are greater than a specific number.',45),(66,'filter(data_frame, column == n)','Extract rows that numbers in a column are equal to a specific number.',45),(67,'filter(data_frame, column <= n)','Extract rows that numbers in a column are less than or equal to a specific umber.',45),(68,'filter(data_frame, column >= n)','Extract rows that numbers in a column are greater than or equal to a specific number.',45),(69,'filter(data_frame, column != n)','Extract rows that numbers in a column are not equal to a specific number.',45),(70,'filter(data_frame, column %in% c(\".\", \".\")','Extract rows that characters in a column contains the list character strings.',45),(71,'filter(data_frame, !is.na(column))','Extract rows where the column does not equal to NA.',45),(72,'filter(data_frame, column_1 = \".\" & column_2 = \".\")','Extract rows based on multiple criteria (and).',45),(73,'filter(data_frame, column_1 = \".\" | column_2 = \".\")','Extract rows based on multiple criteria (or).',45),(74,'filter(.tbl, .vars_predicate)','.tbl - A tbl object;\r\n.vars_predicate - A quoted predicate expression as returned by all_vars() or any_vars().',46),(75,'filter_if(.tbl, .predicate, .vars_predicate)','.tbl - A tbl object;\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names;\r\n.vars_predicate - A quoted predicate expression as returned by all_vars() or any_vars().',47),(76,'filter_at(.tbl, .vars, .vars_predicate)','.tbl - A tbl object;\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL.\r\n.vars_predicate - A quoted predicate expression as returned by all_vars() or any_vars().',48),(77,'distinct(.data, . . ., .keep_all = FALSE)','.data - a tbl;\r\n. . . - Optional variables to use when determining uniqueness. If there are multiple rows for a given combination of inputs, only the first row will be preserved. If omitted, will use all variables;\r\n.keep_all - If TRUE, keep all variables in .data. If a combination of ... is not distinct, this keeps the first row of values.',49),(78,'sample_frac(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL)','tbl - tbl of data;\r\nsize - The fraction of rows to select.  If tbl is grouped, size applies to each group;\r\nreplace - Sample with or without replacement?\r\nweight - Sampling weights. This must evaluate to a vector of non-negative numbers the same length as the input. Weights are automatically standardised to sum to 1. This argument is automatically quoted and later evaluated in the context of the data frame. It supports unquoting. See vignette(\"programming\") for an introduction to these concepts;\r\n.env - This variable is deprecated and no longer has any effect. To evaluate weight in a particular context, you can now unquote a quosure.',50),(79,'sample_n(tbl, size, replace = FALSE, weight = NULL, .env = NULL)','tbl - tbl of data;\r\nsize - For sample_n(), the number of rows to select. For sample_frac(), the fraction of rows to select. If tbl is grouped, size applies to each group;\r\nreplace - Sample with or without replacement?\r\nweight - Sampling weights. This must evaluate to a vector of non-negative numbers the same length as the input. Weights are automatically standardised to sum to 1. This argument is automatically quoted and later evaluated in the context of the data frame. It supports unquoting. See vignette(\"programming\") for an introduction to these concepts.\r\n.env - This variable is deprecated and no longer has any effect. To evaluate weight in a particular context, you can now unquote a quosure.',51),(80,'slice(.data, . . . )','.data - A tbl;\r\n. . . - Integer row values. These arguments are automatically quoted and evaluated in the context of the dataframe. Theysupportunquotingandsplicing. Seevignette(\"programming\") for an introduction to these concepts.',52),(81,'top_n(x, n, wt)','x - a tbl() to filter;\r\nn - number of rows to return. If x is grouped, this is the number of rows per group. Will include more than n rows if there are ties. If n is positive, selects the top n rows. If negative, selects the bottom n rows;\r\nwt - (Optional). The variable to use for ordering. If not specified, defaults to the last variable in the tbl. This argument is automatically quoted and later evaluated in the context of the data frame.',53),(82,'mutate(.data, . . . )','.data - A tbl. All main verbs are S3 generics and provide methods for tbl_df(), dtplyr::tbl_dt() and dbplyr::tbl_dbi();\r\n. . . - Name-value pairs of expressions. Use NULL to drop a variable. These arguments are automatically quoted and evaluated in the context of the dataframe. They support unquoting and splicing.',54),(83,'transmute(.data, . . . )','.data - A tbl;\r\n. . . - Name-value pairs of expressions. Use NULL to drop a variable.',58),(84,'between(x, left, right)','x - A numeric vector of values;\r\nleft, right - Boundart values. This is a shortcut for x >=left & x <=right.',62),(85,'cumall(x)','x - A logical vector.',63),(86,'cumany(x)','x - A logical vector.',64),(87,'cummean(x)','x - An integer or numeric vector.',65),(88,'lead(x, n = 1L, default = NA, order_by = NULL, . . . )','x - A vector of values;\r\nn - A positive integer of length 1, giving the number of positions to lead by;\r\ndefault - Value used for non-existent rows. Defaults to NA;\r\norder_by - Override the default ordering to use another vector;\r\n. . . - Needed for compatibility with lag generic. ',66),(89,'lag(x, n = 1L, default = NA, order_by = NULL, . . . )','x - A vector of values;\r\nn - A positive integer of length 1, giving the number of positions to lag by;\r\ndefault - Value used for non-existent rows. Defaults to NA;\r\norder_by - Override the default ordering to use another vector;\r\n. . . - Needed for compatibility with lag generic.',67),(90,'row_number(x)','x - A vector of values to rank. Missing values are left as is. If you want to treat them as the smallest or largest values, replace with Inf or -Inf before ranking.',68),(91,'ntile(x, n)','x - A vector of values to rank. Missing values are left as is. If you want to treat them as the smallest or largest values, replace with Inf or -Inf before ranking;\r\nn - Number of groups to split up into.',69),(92,'min_rank(x)','x - A vector of values to rank. Missing values are left as is. If you want to treat them as the smallest or largest values, replace with Inf or -Inf before ranking.',70),(93,'dense_rank(x)','x - A vector of values to rank. Missing values are left as is. If you want to treat them as the smallest or largest values, replace with Inf or -Inf before ranking.',71),(94,'percent_rank(x)','x - A vector of values to rank. Missing values are left as is. If you want to treat them as the smallest or largest values, replace with Inf or -Inf before ranking.',72),(95,'cume_dist(x)','x - A vector of values to rank. Missing values are left as is. If you want to treat them as the smallest or largest values, replace with Inf or -Inf before ranking.',73),(96,'desc(x)','x - vector to transform',74),(97,'recode(.x, . . ., .default = NULL, .missing = NULL)','.x - A vector to modify;\r\n. . . - Replacements. These should be named for character and factor .x, and can be named for numeric .x. The argument names should be the current values to be replaced, and the argument values should be the new (replacement) values. All replacements must be the same type, and must have either length one or the same length as x. These dots support tidy dots features;\r\n.default - If supplied, all values not otherwise matched will be given this value. If not supplied and if the replacements are the same type as the original values in .x, unmatched values are not changed. If not supplied and if the replacements are not compatible, unmatched values are replaced with NA. .default must be either length 1 or the same length as .x;\r\n.missing - If supplied, any missing values in .x will be replaced by this value. Must be either length 1 or the same length as .x.',75),(98,'recode_factor(.x, . . ., .default = NULL, .missing = NULL, .ordered = FALSE)','.x - A vector to modify;\r\n. . . - Replacements. These should be named for character and factor .x, and can be named for numeric .x. The argument names should be the current values to be replaced, and the argument values should be the new (replacement) values. All replacements must be the same type, and must have either length one or the same length as x. These dots support tidy dots features;\r\n.default - If supplied, all values not otherwise matched will be given this value. If not supplied and if the replacements are the same type as the original values in .x, unmatched values are not changed. If not supplied and if the replacements are not compatible, unmatched values are replaced with NA. .default must be either length 1 or the same length as .x;\r\n.missing - If supplied, any missing values in .x will be replaced by this value. Must be either length 1 or the same length as .x;\r\n.ordered - If TRUE, recode_factor() creates an ordered factor.',75),(99,'summarise/summarize(.data, . . . )','.data - A tbl;\r\n. . . - Name-value pairs of summary functions. The name will be the name of the variable in the result. The value should be an expression that returns a single value like min(x), n(), or sum(is.na(y)). These arguments are automatically quoted and evaluated in the context of the dataframe. They support unquoting and splicing.',76),(100,'mutate_all(.tbl, .funs, . . . )','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula.\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',55),(101,'mutate_if(.tbl, .predicate, .funs, . . . )','.tbl - A tbl object;\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',56),(102,'mutate_at(.tbl, .vars, .funs, . . ., .cols = NULL)','.tbl - A tbl object;\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support;\r\n.cols - This argument has been renamed to .vars to fit dplyr’s terminology and is deprecated.',57),(103,'transmute_all(.tbl, .funs, . . . )','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula.\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',59),(104,'transmute_if(.tbl, .predicate, .funs, . . . )','.tbl - A tbl object;\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',60),(105,'transmute_at(.tbl, .vars, .funs, . . ., .cols = NULL)','.tbl - A tbl object;\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support;\r\n.cols - This argument has been renamed to .vars to fit dplyr’s terminology and is deprecated.',61),(106,'summarise_all(.tbl, .funs, . . . )','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula.\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',77),(107,'summarise_if(.tbl, .predicate, .funs, . . . )','.tbl - A tbl object;\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',78),(108,'summarize_at(.tbl, .vars, .funs, . . ., .cols = NULL)','.tbl - A tbl object;\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support;\r\n.cols - This argument has been renamed to .vars to fit dplyr’s terminology and is deprecated.',79),(109,'tally(x, wt, sort = FALSE)','x - A tbl() to tally;\r\nwt - (Optional) If omitted (and no variable named n exists in the data), will count the number of rows. If specified, will perform a \"weighted\" tally by summing the (non-missing) values of variable wt. A column named n (but not nn or nnn) will be used as weighting variable by default in tally(), but not in count(). This argument is automatically quoted and later evaluated in the context of the data frame. It supports unquoting;\r\nsort - if TRUE will sort output in descending order of n.',80),(110,'count(x, . . ., wt = NULL, sort = FALSE)','x - A tbl() to count;\r\nwt - (Optional) If omitted (and no variable named n exists in the data), will count the number of rows. If specified, will perform a \"weighted\" tally by summing the (non-missing) values of variable wt. A column named n (but not nn or nnn) will be used as weighting variable by default in tally(), but not in count(). This argument is automatically quoted and later evaluated in the context of the data frame. It supports unquoting;\r\nsort - if TRUE will sort output in descending order of n;\r\n. . . - Variables to group by.',81),(111,'add_tally(x, wt, sort = FALSE)','x - A tbl() to tally;\r\nwt - (Optional) If omitted (and no variable named n exists in the data), will count the number of rows. If specified, will perform a \"weighted\" tally by summing the (non-missing) values of variable wt. A column named n (but not nn or nnn) will be used as weighting variable by default in tally(), but not in count(). This argument is automatically quoted and later evaluated in the context of the data frame. It supports unquoting;\r\nsort - if TRUE will sort output in descending order of n.',82),(112,'add_count(x, . . ., wt = NULL, sort = FALSE)','x - A tbl() to count;\r\nwt - (Optional) If omitted (and no variable named n exists in the data), will count the number of rows. If specified, will perform a \"weighted\" tally by summing the (non-missing) values of variable wt. A column named n (but not nn or nnn) will be used as weighting variable by default in tally(), but not in count(). This argument is automatically quoted and later evaluated in the context of the data frame. It supports unquoting;\r\nsort - if TRUE will sort output in descending order of n;\r\n. . . - Variables to group by.',83),(113,'first(x, order_by = NULL, default = default_missing(x))','x - A vector;\r\norder_by - An optional vector used to determine the order;\r\ndefault - A default value to use if the position does not exist in the input. This is guessed by default for base vectors, where a missing value of the appropriate type is returned, and for lists, where a NULL is return; For more complicated objects, you’ll need to supply this value. Make sure it is the same type as x.',84),(114,'last(x, order_by = NULL, default = default_missing(x))','x - A vector;\r\norder_by - An optional vector used to determine the order;\r\ndefault - A default value to use if the position does not exist in the input. This is guessed by default for base vectors, where a missing value of the appropriate type is returned, and for lists, where a NULL is return; For more complicated objects, you’ll need to supply this value. Make sure it is the same type as x.',85),(115,'nth(x, n, order_by = NULL, default = default_missing(x))','x - A vector;\r\nn - For nth_value(), a single integer specifying the position. Negative integers index from the end (i.e. -1L will return the last value in the vector). If a double is supplied, it will be silently truncated;\r\norder_by - An optional vector used to determine the order;\r\ndefault - A default value to use if the position does not exist in the input. This is guessed by default for base vectors, where a missing value of the appropriate type is returned, and for lists, where a NULL is return; For more complicated objects, you’ll need to supply this value. Make sure it is the same type as x.',86),(116,'n()','This function is implemented specifically for each data source and can only be used from within summarise(), mutate() and filter().',87),(117,'n_distinct( . . ., na.rm = FALSE)','. . . - Vectors of values;\r\nna.rm - if TRUE missing values don\'t count.',88),(118,'arrange(.data, . . ., .by_group = FALSE)','.data - A tbl;\r\n. . . - Comma separated list of unquoted variable names. Use desc() to sort a variable in descending order;\r\n.by_group - If TRUE, will sort first by grouping variable. Applies to grouped data frames only.',89),(119,'arrange(data_frame, desc(column))','Arrange a column in descenting order.',89),(120,'arrange_all(.tbl, .funs = list(), . . . )','.tbl - A tbl object;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',90),(121,'arrange_at(.tbl, .vars, .funs = list(), . . . )','.tbl - A tbl object;\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',91),(122,'arrange_if(.tbl, .predicate, .funs = list(), . . . )','.tbl - A tbl object;\r\n.predicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names;\r\n.funs - List of function calls generated by funs(), or a character vector of function names, or simply a function. Bare formulas are passed to rlang::as_function() to create purrr-style lambda functions. Note that these lambda prevent hybrid evaluation from happening and it is thus more efficient to supply functions like mean() directly rather than in a lambda-formula;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',92),(123,'rename(.data, . . . )','.data - A tbl;\r\n. . . - One or more unquoted expressions separated by commas. You can treat variable names like they are positions. Positive values select variables; negative values to drop variables. If the first expression is negative, select() will automatically start with all variables. Use named arguments to rename selected variables. These arguments are automatically quoted and evaluated in a context where column names represent column positions. They support unquoting and splicing.',93),(124,'rename_all(.tbl, .funs = list(), . . . )','.tbl - A tbl object;\r\n.funs - A single expression quoted with funs() or within a quosure, a string naming a function, or a function;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',94),(125,'rename_if(.tbl, .predicate, .funs = list(), . . . )','.tbl - A tbl object;.\r\npredicate - A predicate function to be applied to the columns or a logical vector. The variables for which .predicate is or returns TRUE are selected. This argument is passed to rlang::as_function() and thus supports quosure-style lambda functions and strings representing function names;\r\n.funs - A single expression quoted with funs() or within a quosure, a string naming a function, or a function;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',95),(126,'rename_at(.tbl, .vars, .funs = list(), . . . )','.tbl - A tbl object;\r\n.vars - A list of columns generated by vars(), a character vector of column names, a numeric vector of column positions, or NULL;\r\n.funs - A single expression quoted with funs() or within a quosure, a string naming a function, or a function;\r\n. . . - Additional arguments for the function calls in .funs. These are evaluated only once, with tidy dots support.',96),(127,'gather(data, key = \"key\", value = \"value\", . . ., na.rm = FALSE, convert = FALSE, factor_key = FALSE)','data - A data frame;\r\nkey, value - Names of new key and value columns, as strings or symbols. This argument is passed by expression and supports quasiquotation (you can unquote strings and symbols). The name is captured from the expression with rlang::quo_name() (note that this kind of interface where symbols do not represent actual objects is now discouraged in the tidyverse; we support it here for backward compatibility);\r\n. . . - A selection of columns. If empty, all variables are selected. You can supply bare variable names, select all variables between x and z with x:z, exclude y with -y;\r\nna.rm - If TRUE, will remove rows from output where the value column in NA;\r\nconvert - If TRUE will automatically run type.convert() on the key column. This is useful if the column names are actually numeric, integer, or logical;\r\nfactor_key - If FALSE, the default, the key values will be stored as a character vector. If TRUE, will be stored as a factor, which preserves the original ordering of the columns.',97),(128,'spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE, sep = NULL)','data - A data frame;\r\nkey, value - Column names or positions. This is passed to tidyselect::vars_pull(). These arguments are passed by expression and support quasiquotation (you can\r\nunquote column names or column positions);\r\nfill - If set, missing values will be replaced with this value. Note that there are two types of missingness in the input: explicit missing values (i.e. NA), and implicit missings, rows that simply aren’t present. Both types of missing value will be replaced by fill;\r\nconvert - If TRUE, type.convert() with asis = TRUE will be run on each of the new columns. This is useful if the value column was a mix of variables that was coerced to a string. If the class of the value column was factor or date, note that will not be true of the new columns that are produced, which are coerced to character before type conversion;\r\ndrop - If FALSE, will keep factor levels that don’t appear in the data, filling in missing combinations with fill;\r\nsep - If NULL, the column names will be taken from the values of key variable. If non-NULL, the column names will be given by \"<key_name><sep><key_value>\".',98),(129,'separate(data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE, convert = FALSE, extra = \"warn\", fill = \"warn\", ...)','data - A data frame;\r\ncol - Column name or position. This is passed to tidyselect::vars_pull(). This argument is passed by expression and supports quasiquotation (you can unquote column names or column positions);\r\ninto - Names of new variables to create as character vector;\r\nsep - Separator between columns. If character, is interpreted as a regular expression. The default value is a regular expression that matches any sequence of non-alphanumeric values. If numeric, interpreted as positions to split at. Positive values start at 1 at the far-left of the string; negative value start at -1 at the far-right of the string. The length of sep should be one less than into;\r\nremove - If TRUE, remove input column from output data frame;\r\nconvert - If TRUE, will run type.convert() with as.is = TRUE on new columns. This is useful if the component columns are integer, numeric or logical.\r\nextra - If sep is a character vector, this controls what happens when there are too many pieces. There are three valid options:\r\n• \"warn\" (the default): emit a warning and drop extra values.\r\n• \"drop\": drop any extra values without a warning.\r\n• \"merge\": only splits at most length(into) times;\r\nfill - If sep is a character vector, this controls what happens when there are not enough pieces. There are three valid options:\r\n• \"warn\" (the default): emit a warning and fill from the right.\r\n• \"right\": fill with missing values on the right.\r\n• \"left\": fill with missing values on the left;\r\n. . . - Additional arguments passed on to methods.',99),(130,'separate_rows(data, . . ., sep = \"[^[:alnum:].]+\", convert = FALSE)','data - A data frame;\r\n. . . - A selection of columns. If empty, all variables are selected. You can supply bare variable names, select all variables between x and z with x:z, exclude y with -y;\r\nsep - Separator delimiting collapsed values;\r\nconvert - If TRUE will automatically run type.convert() on the key column. This is useful if the column names are actually numeric, integer, or logical.',100),(131,'unite(data, col, ..., sep = \"_\", remove = TRUE)','data - A data frame;\r\ncol - The name of the new column, as a string or symbol. This argument is passed by expression and supports quasiquotation (you can unquote strings and symbols). The name is captured from the expression with rlang::quo_name() (note that this kind of interface where symbols do not represent actual objects is now discouraged in the tidyverse; we support it here for backward compatibility);\r\n. . . - A selection of columns. If empty, all variables are selected. You can supply bare variable names, select all variables between x and z with x:z, exclude y with -y;\r\nsep - Separator to use between values;\r\nremove - If TRUE, remove input columns from output data frame.',101),(132,'expand(data, . . . )','data - A data frame;\r\n. . . - Specification of columns to expand. To find all unique combinations of x, y and z, including those not found in the data, supply each variable as a separate argument. For factors, the full set of levels (not just those that appear in the data) are used. For continuous variables, you may need to fill in values that don’t appear in the data: to do so use expressions like year = 2010:2020 or year = full_seq(year,1). Length-zero (empty) elements are automatically dropped.',102),(133,'expand(data, nesting( . . . ))','data - A data frame;\r\n. . . - Specification of columns to expand. To find all unique combinations of x, y and z, including those not found in the data, supply each variable as a separate argument. To find only the combinations that occur in the data, use nest: expand(df, nesting(x, y, z)). You can combine the two forms. For example, expand(df, nesting(school_id, student_id), date) would produce a row for every student for each date. nesting() is the complement to crossing(): it only keeps combinations of all variables that appear in the data.',102),(134,'expand(data, crossing( . . . ))','data - A data frame;\r\n. . . - Specification of columns to expand. To find all unique combinations of x, y and z, including those not found in the data, supply each variable as a separate argument. crossing() is similar to expand.grid(), this never converts strings to factors, returns a tbl_df without additional attributes, and first factors vary slowest.',102),(135,'complete(data, . . ., fill = list())','data - A data frame.\r\n. . . - Specification of columns to expand. To find all unique combinations of x, y and z, including those not found in the data, supply each variable as a separate argument. To find only the combinations that occur in the data, use nest: expand(df, nesting(x, y, z)). You can combine the two forms. For example, expand(df, nesting(school_id, student_id), date) would produce a row for every student for each date. For factors, the full set of levels (not just those that appear in the data) are used. For continuous variables, you may need to fill in values that don’t appear in the data: to do so use expressions like year = 2010:2020 or year = full_seq(year,1). Length-zero (empty) elements are automatically dropped;\r\nfill - A named list that for each variable supplies a single value to use instead of NA for missing combinations.',103),(136,'extract(data, col, into, regex = \"([[:alnum:]]+)\", remove = TRUE,\r\nconvert = FALSE, . . . )','data - A data frame;\r\ncol - Column name or position. This is passed to tidyselect::vars_pull(). This argument is passed by expression and supports quasiquotation (you can unquote column names or column positions);\r\ninto - Names of new variables to create as character vector;\r\nregex - A regular expression used to extract the desired values. The should be one group (defined by ()) for each element of into;\r\nremove - If TRUE, remove input column from output data frame;\r\nconvert - If TRUE, will run type.convert() with as.is = TRUE on new columns. This is useful if the component columns are integer, numeric or logical;\r\n. . . - Other arguments passed on to regexec() to control how the regular expression is processed.',104),(137,'nest(data, . . ., .key = \"data\")','data - A data frame;\r\n. . . - A  selection of columns. If empty, all variables are selected. You can supply bare variable names, select all variables between x and z with x:z, exclude y with -y;\r\n.key - The name of the new column, as a string or symbol. This argument is passed by expression and supports quasiquotation (you can unquote strings and symbols). The name is captured from the expression with rlang::quo_name() (note that this kind of interface where symbols do not represent actual objects is now discouraged in the tidyverse; we support it here for backward compatibility).',105),(138,'unnest(data, . . ., .drop = NA, .id = NULL, .sep = NULL, .preserve = NULL)','data - A data frame;\r\n. . . - Specification of columns to unnest. Use bare variable names or functions of variables. If omitted, defaults to all list-cols;\r\n.drop - Should additional list columns be dropped? By default, unnest will drop them if unnesting the specified columns requires the rows to be duplicated;\r\n.id - Data frame identifier - if supplied, will create a new column with name .id, giving a unique identifier. This is most useful if the list column is named;\r\n.sep - If non-NULL, the names of unnested data frame columns will combine the name of the original list-col with the names from nested data frame, separatedby.sep;\r\n.preserve - Optionally, list-columns to preserve in the output. These will be duplicated in the same way as atomic vectors. This has dplyr::select semantics so you can preserve multiple variables with .preserve = c(x, y)or.preserve = starts_with(\"list\").',106),(139,'uncount(data, weights, .remove = TRUE, .id = NULL)','data - A data frame, tibble, or grouped tibble;\r\nweights - A vector of weights. Evaluated in the context of data; supports quasiquotation;\r\n.remove - If TRUE, and weights is a single;\r\n.id - Supply a string to create a new variable which gives a unique identidier for each created row.',107),(140,'full_seq(x, period, tol = 1e-06)','x - A numeric vector;\r\nperiod - Gap between each observation. The existing data will be checked to ensure that it is actually of this periodicity;\r\ntol - Numerical tolerance for checking periodicity.',108),(141,'fill(data, . . ., .direction = c(\"down\", \"up\"))','Missing values are replaced in atomic vectors; NULLs are replaced in list. \r\ndata - A data frame;\r\n. . . - A selection of columns. If empty, all variables are selected. You can supply bare variable names, select all variables between x and z with x:z, exclude y with -y;\r\n.direction - Direction in which to fill missing values. Currently either \"down\" (the default) or \"up\".',109),(142,'drop_na(data, . . . )','data - A data frame;\r\n. . . - A selection of columns. If empty, all variables are selected. You can supply bare variable names, select all variables between x and z with x:z, exclude y with -y. ',110),(143,'replace_na(data, replace, . . . )','data - A data frame or vector;\r\nreplace - If data is a data frame, a named list giving the value to replace NA with for each column. If data is a vector, a single value used for replacement;\r\n. . . - Additional arguments for methods. Currently unused.',111),(144,'left_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), . . . )','x, y - tbls to join;\r\nby - a character vector of variables to join by. If NULL, the default, *_join() will do a natural join, using all variables with common names across the two tables. A message lists the variables so that you can check they’re right (to suppress the message, simply explicitly list the variables that you want to join). To join by different variables on x and y use a named vector. For example, by = c(\"a\" = \"b\") will match x.a to y.b;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\nsuffix - If there are non-joined duplicate variables in x and y, these suffixes will be added to the output to disambiguate them. Should be a character vector of length 2;\r\n. . . - other parameters passed onto methods, for instance, na_matches to control how NA values are matched. See join.tbl_df for more.',112),(145,'right_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), . . . )','x, y - tbls to join;\r\nby - a character vector of variables to join by. If NULL, the default, *_join() will do a natural join, using all variables with common names across the two tables. A message lists the variables so that you can check they’re right (to suppress the message, simply explicitly list the variables that you want to join). To join by different variables on x and y use a named vector. For example, by = c(\"a\" = \"b\") will match x.a to y.b;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\nsuffix - If there are non-joined duplicate variables in x and y, these suffixes will be added to the output to disambiguate them. Should be a character vector of length 2;\r\n. . . - other parameters passed onto methods, for instance, na_matches to control how NA values are matched. See join.tbl_df for more.',113),(146,'inner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), . . . )','x, y - tbls to join;\r\nby - a character vector of variables to join by. If NULL, the default, *_join() will do a natural join, using all variables with common names across the two tables. A message lists the variables so that you can check they’re right (to suppress the message, simply explicitly list the variables that you want to join). To join by different variables on x and y use a named vector. For example, by = c(\"a\" = \"b\") will match x.a to y.b;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\nsuffix - If there are non-joined duplicate variables in x and y, these suffixes will be added to the output to disambiguate them. Should be a character vector of length 2;\r\n. . . - other parameters passed onto methods, for instance, na_matches to control how NA values are matched. See join.tbl_df for more.',114),(147,'full_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), . . . )','x, y - tbls to join;\r\nby - a character vector of variables to join by. If NULL, the default, *_join() will do a natural join, using all variables with common names across the two tables. A message lists the variables so that you can check they’re right (to suppress the message, simply explicitly list the variables that you want to join). To join by different variables on x and y use a named vector. For example, by = c(\"a\" = \"b\") will match x.a to y.b;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\nsuffix - If there are non-joined duplicate variables in x and y, these suffixes will be added to the output to disambiguate them. Should be a character vector of length 2;\r\n. . . - other parameters passed onto methods, for instance, na_matches to control how NA values are matched. See join.tbl_df for more.',115),(148,'semi_join(x, y, by = NULL, copy = FALSE, . . . )','x, y - tbls to join;\r\nby - a character vector of variables to join by. If NULL, the default, *_join() will do a natural join, using all variables with common names across the two tables. A message lists the variables so that you can check they’re right (to suppress the message, simply explicitly list the variables that you want to join). To join by different variables on x and y use a named vector. For example, by = c(\"a\" = \"b\") will match x.a to y.b;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\n. . . - other parameters passed onto methods, for instance, na_matches to control how NA values are matched. See join.tbl_df for more.',116),(149,'anti_join(x, y, by = NULL, copy = FALSE, . . . )','x, y - tbls to join;\r\nby - a character vector of variables to join by. If NULL, the default, *_join() will do a natural join, using all variables with common names across the two tables. A message lists the variables so that you can check they’re right (to suppress the message, simply explicitly list the variables that you want to join). To join by different variables on x and y use a named vector. For example, by = c(\"a\" = \"b\") will match x.a to y.b;\r\ncopy - If x and y are not from the same data source, and copy is TRUE, then y will be copied into the same src as x. This allows you to join tables across srcs, but it is a potentially expensive operation so you must opt into it;\r\n. . . - other parameters passed onto methods, for instance, na_matches to control how NA values are matched. See join.tbl_df for more.',117),(150,'bind_rows( . . ., .id = NULL)','. . . - Data frames to combine. Each argument can either be a data frame, a list that could be a data frame, or a list of data frames. When row-binding, columns are matched by name, and any missing columns will be filled with NA.\r\n.id - Data frame identifier. When .id is supplied, a new column of identifiers is created to link each row to its original data frame. The labels are taken from the named arguments to bind_rows(). When a list of data frames is supplied, the labels are taken from the names of the list. If no names are found a numeric sequence is used instead.',118),(151,'bind_cols( . . . )','. . . - Data frames to combine; Each argument can either be a data frame, a list that could be a data frame, or a list of data frames. When column-binding, rows are matched by position, so all data frames must\r\nhave the same number of rows. ',119),(152,'combine( . . . )','. . . - Data frames to combine. Each argument can either be a data frame, a list that could be a data frame, or a list of data frames.',120),(153,'union(x, y, . . . )','x, y - objects to perform set function on (ignoring order);\r\n. . . - other arguments passed on to methods.',121),(154,'union_all(x, y, . . . )','x, y - objects to perform set function on (ignoring order);\r\n. . . - other arguments passed on to methods.',122),(155,'setequal(x, y . . . )','x, y - objects to perform set function on (ignoring order);\r\n. . . - other arguments passed on to methods.',123),(156,'intersect(x, y, . . . )','x, y - objects to perform set function on (ignoring order);\r\n. . . - other arguments passed on to methods.',124),(157,'setdiff(x, y, . . . )','x, y - objects to perform set function on (ignoring order);\r\n. . . - other arguments passed on to methods.',125),(158,'ggvis(data = NULL, . . ., env = parent.frame())','data - A data object;\r\n. . . - Property mappings. If not named, the first two mappings are taken to be x and y. Common properties are x, y, stroke, fill, opacity, shape; \r\nenv - Environment in which to evaluate properties.',126),(159,'ggvisControlOutput(outputId, plotId = NULL)','outputId - The output variable to read the value from；\r\nplotId - An optional plot ID or vector of plot IDs. The plots will have their .onControlOutput functions called after the controls are drawn.',127),(160,'ggvis_message(session, type, data = NULL, id = NULL)','session - A session object;\r\ntype - A string representing the type of the message;\r\ndata - An object (typically a list) containing information for the client;\r\nid - A unique identifier for ggvis message handler (optional).',128),(161,'explain(x, . . . )','S3 method for class \'ggvis\'. \r\nx - Visualisation to explain;\r\n. . . - Needed for compatibility with generic. Ignored by this method.',129),(162,'bind_shiny(vis, plot_id, controls_id = NULL, . . ., session = shiny::getDefaultReactiveDomain())  bind_shiny_ui(vis, controls_id, session = shiny::getDefaultReactiveDomain())  ggvisOutput(plot_id = rand_id(\"plot_id\"))','vis - A ggvis object, or a reactive expression that returns a ggvis object;\r\nplot_id - Unique identifier to use for the div containing the ggvis plot;\r\ncontrols_id - Unique identifier for controls div;\r\n. . . - Other arguments passed to as.vega;\r\nsession - A Shiny session object.',130),(163,'waggle(min, max, value = (min + max)/2, step = (max - min)/50, fps = 10)','min - A minimum value;\r\nmax - A maximum value;\r\nvalue - Starting value. Defaults to half-way between min and max;\r\nstep - How much value changes at each frame. Defaults to 50 steps between min and max so it takes 5 seconds to waggle once;\r\nfps - number of frames per second.',131),(164,'get_data(vis)','vis - A ggvis object.',132),(165,'export_png(vis, file = NULL)','vis - A ggvis object;\r\nfile - Output file name. If NULL, defaults to \"plot.png\".',133),(166,'export_svg(vis, file = NULL)','vis - A ggvis object;\r\nfile - Output file name. If NULL, defaults to \"plot.svg\".',133),(167,'show_tooltip(session, l = 0, t = 0, html = \"\")','session - A Shiny session object;\r\nl - Pixel location of left edge of tooltip (relative to page);\r\nt - Pixel location of top edge of tooltip (relative to page);\r\nhtml - HTML to display in the tooltip box.',134),(168,'hide_tooltip(session)','session - A Shiny session object.\r\n',135),(169,'show_spec(vis, pieces = NULL)','vis - Visualisation to print;\r\npieces - Optional, a character or numeric vector used to pull out selected pieces of the spec.',136),(170,'prop(property, x, scale = NULL, offset = NULL, mult = NULL, env = parent.frame(), event = NULL, label = NULL)','property - A property, like \"x\", \"x2\", \"y\", \"fill\", and so on;\r\nx - The value of the property. This can be an atomic vector (a constant), a name or quoted call (a variable), a single-sided formula (a constant or variable depending on its contents), or a delayed reactive (which can be either variable or constant);\r\nscale - If NULL, automatically determine behavior by the kind of value (constant, variable, or reactive). If TRUE use the default scale associated with property. If FALSE, do not scale the value. Otherwise supply a string to select a custom scale. If x is an interactive input, then this defaults to the scale parameter of the input;\r\noffset, mult - Additive and multiplicate pixel offset used to adjust scaled values. These are useful if you want to place labels offset from points;\r\nenv - If x is a quoted call this provides the environment in which to look for variables not in the data. You should not need this in ordinary operation;\r\nevent - An event to which this property applies. One of \"update\", \"enter\", \"exit\", \"hover\", \"brush\";\r\nlabel - A label for this prop to use for reporting errors.',137),(171,'is.prop(x)','x - The value of the property. This can be an atomic vector (a constant), a name or quoted call (a variable), a single-sided formula (a constant or variable depending on its contents), or a delayed reactive (which can be either variable or constant).',137),(172,'is.prop_constant(x)','x - The value of the property. This can be an atomic vector (a constant), a name or quoted call (a variable), a single-sided formula (a constant or variable depending on its contents), or a delayed reactive (which can be either variable or constant).',137),(173,'is.prop_variable(x)','x - The value of the property. This can be an atomic vector (a constant), a name or quoted call (a variable), a single-sided formula (a constant or variable depending on its contents), or a delayed reactive (which can be either variable or constant).',137),(174,'is.prop_reactive(x)','x - The value of the property. This can be an atomic vector (a constant), a name or quoted call (a variable), a single-sided formula (a constant or variable depending on its contents), or a delayed reactive (which can be either variable or constant).',137),(175,'props( . . ., .props = NULL, inherit = TRUE, env = parent.frame())','. . . - A set of name-value pairs. The name should be a valid vega property. The first two unnamed components are taken to be x and y. Any additional unnamed components will raise an error; \r\n.props When calling props from other functions, you\'ll often have a list of quoted function functions. You can pass that function to the .props argument instead of messing around with substitute. In other words, .props lets you opt out of the non-standard evaluation that props does; \r\ninherit - If TRUE, the defaults, will inherit from properties from the parent layer if FALSE, it will start from nothing; \r\nenv - The environment in which to evaluate variable properties. \r\nx - An object to test for props-ness. ',138),(176,'is.ggvis_props(x)','x - An object to test for props-ness. ',138),(177,'prop_domain(x, data)','x - property to dispatch on;\r\ndata - name of data set.',139),(178,'set_options(vis, width = NULL, height = NULL, keep_aspect = NULL, resizable = NULL, padding = NULL, duration = NULL, renderer = NULL, hover_duration = NULL)','vis - Visualisation to modify;\r\nwidth, height - Width and height of plot, in pixels. Default is 600x400. width or height can also be\"auto\", in which case the plot will size to fit in the containing div. This is useful only in a Shiny app or custom HTML output. Note that height=\"auto\" should only be used when the plot is placed within a div that has a fixed height; if not, automatic height will not work, due to the way that web browsers do vertical layout;\r\nkeep_aspect - Should the aspect ratio be preserved? The default value is FALSE, or the value of getOption(\"ggvis.keep_aspect\"), if it is set;\r\nresizable - If TRUE, allow the user to resize the plot. The default value is TRUE, or the value of getOption(\"ggvis.resizable\"), if it is set. Not compatible when width or height is \"auto\";\r\npadding - A padding object specifying padding on the top, right, left, and bottom;\r\nduration - Duration of transitions, in milliseconds;\r\nrenderer - The renderer to use in the browser. Can be \"canvas\" or \"svg\" (the default);\r\nhover_duration - The amount of time for hover transitions, in milliseconds.',140),(179,'set_scale_label(vis, scale, label)','vis - A ggvis object;\r\nscale - The name of a scale, like \"x\"; \r\nlabel - Text to use for the label.',141),(180,'scaled_value(scale, value)','scale - The name of a scale, e.g., \"x\", \"fill\";\r\nvalue - A value which will be transformed using the scale.',142),(181,'left_right(min, max, value = (min + max)/2, step = (max - min)/40)','min - A minimum value;\r\nmax - A maximum value;\r\nvalue - The initial value before any keys are pressed. Defaults to half-way between min and max;\r\nstep - How much each key press changes value. Defaults to 40 steps along range.',143),(182,'up_down(min, max, value = (min + max)/2, step = (max - min)/40)','min - A minimum value;\r\nmax - A maximum value;\r\nvalue - The initial value before any keys are pressed. Defaults to half-way between min and max;\r\nstep - How much each key press changes value. Defaults to 40 steps along range.',143),(183,'padding(top = NULL, right = NULL, bottom = NULL, left = NULL)','top, right, bottom, left - Amount of padding on each border. Can either be a single number, \"auto\", or \"strict\".',144),(184,'band(offset = NULL, mult = NULL)','offset, mult - Additive and multiplicate offsets used to adjust the band size. For example, use mult = 0.9 to make a bar take up 90% of the space allocated for its category;\r\nx - object to test for band-ness;',145),(185,'is.prop_band(x)','x - object to test for band-ness.',145),(186,'handle_resize(vis, on_resize)','vis - Visualisation to listen to;\r\non_resize - Callback function with arguments: \r\nwidth,height: Width and height in pixels; \r\npadding: A named list of four components giving the padding in each direction;\r\nsession: The session, used to communicate with the browser.',146),(187,'plot_width(vis)','vis - Visualisation to listen to.',147),(188,'plot_height(vis)','vis - Visualisation to listen to.',148),(189,'axis_props(ticks = NULL, majorTicks = NULL, minorTicks = NULL, grid = NULL, labels = NULL, title = NULL, axis = NULL)','ticks - A named list of line properties for ticks;\r\nmajorTicks - A named list of line properties for major ticks;\r\nminorTicks - A named list of line properties for minor ticks;\r\ngrid - A named list of line properties for grid lines;\r\nlabels - A named list of text properties for axis labels;\r\ntitle - A named list of text properties for the axis title;\r\naxis - A named list of line properties for the axis line.',149),(190,'add_axis(vis,type,scale=NULL,orient=NULL,title=NULL,title_offset=NULL,format=NULL,ticks=NULL,values=NULL,subdivide=NULL,tick_padding=NULL,tick_size_major=NULL,tick_size_minor=tick_size_major,tick_size_end=tick_size_major,offset=NULL,layer=\"back\",grid=TRUE,properties=NULL)','vis - A ggvis object;\r\ntype - The type of axis. Either x or y;\r\nscale - The name of the scale backing the axis component. Defaults to the scale type, you will need to specify if you want (e.g.) a scale for a secondary y-axis;\r\norient - The orientation of the axis. One of top, bottom, left or right. The orientation can be used to further specialize the axis type (e.g., a y axis oriented for the right edge of the chart) - defaults to bottom for x axes, and left for y axes;\r\ntitle - A title for the axis. By default, it uses the name of the field in the first data set used by the scale. Use \"\" to suppress the title;\r\ntitle_offset - The offset (in pixels) from the axis at which to place the title;\r\nformat - The formatting pattern for axis labels. Vega uses D3’s format pattern: https://github.com/mbostock/d3/wiki/Formatting; \r\nticks - A desired number of ticks. The resulting number may be different so that values are \"nice\" (multiples of 2, 5, 10) and lie within the underlying scale’s range;\r\nvalues - Explicitly set the visible axis tick values;\r\nsubdivide - If provided, sets the number of minor ticks between major ticks (the value 9 results in decimal subdivision);\r\ntick_padding - The padding, in pixels, between ticks and text labels;\r\ntick_size_major, tick_size_minor, tick_size_end - The size, in pixels, of major, minor and end ticks;\r\noffset - The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle;\r\nlayer - A string indicating if the axis (and any gridlines) should be placed above or below the data marks. One of \"front\" or \"back\" (default);\r\ngrid - A flag indicating if gridlines should be created in addition to ticks;\r\nproperties - Optional mark property definitions for custom axis styling. Should be an object created by axis_props, with properties for ticks, majorTicks, minorTicks, grid, labels, title, and axis.',150),(191,'hide_axis(vis, scale)','vis - A ggvis object;\r\nscale - The name of the scale backing the axis component. Defaults to the scale type: you will need to specify if you want (e.g.) a scale for a secondary y-axis.',151),(192,'add_legend(vis, scales = NULL, orient = \"right\", title = NULL, format = NULL, values = NULL, properties = NULL)','vis - A ggvis object;\r\nscales - The name of one or more scales for which to add a legend. Typically one of \"size\", \"shape\", \"fill\", \"stroke\", although custom scale names may also be used. Multiple names can also be used, like c(\"fill\", \"shape\");\r\norient - The orientation of the legend. One of \"left\" or \"right\". This determines how the legend is positioned within the scene. The default is \"right\"; \r\ntitle - A title for the legend. By default, it uses the name the fields used in the legend. Use \"\" to suppress the title;\r\nformat - The formatting pattern for axis labels. Vega uses D3’s format pattern: https://github.com/mbostock/d3/wiki/Formatting; \r\nvalues - Explicitly set the visible legend values; \r\nproperties - Optional mark property definitions for custom legend styling. Should be an object created by legend_props, with properties for title, label, symbols, gradient, legend.',152),(193,'hide_legend(vis, scales)','vis - A ggvis object;\r\nscales - The name of one or more scales for which to add a legend. Typically one of \"size\", \"shape\", \"fill\", \"stroke\", although custom scale names may also be used. Multiple names can also be used, like c(\"fill\", \"shape\").',153),(194,'handle_brush(vis, on_move = NULL, fill = \"black\")','vis - Visualisation to listen to;\r\non_move - Callback function with arguments:\r\nitems: A data frame containing information about the items under the plot. An empty data.frame if no points under the brush;\r\npage_loc: Location of the brush with repsect to the page;\r\nplot_loc: Location of the brush with respect to the plot;\r\nsession: The session, used to communicate with the browser;\r\nfill - Colour of the brush.',154),(195,'handle_click(vis, on_click = NULL)','vis - Visualisation to listen to;\r\non_click - Callback function with arguments:\r\ndata: A data frame with one row;\r\nlocation: A named list with components x and y;\r\nsession: The session, used to communicate with the browser;',155),(196,'handle_hover(vis, on_mouse_over = NULL, on_mouse_out = NULL)','vis - Visualisation to listen to;\r\non_mouse_over - Callback function with arguments:\r\ndata: A data frame with one row;\r\nlocation: A named list with components x and y;\r\nsession: The session, used to communicate with the browser;\r\non_mouse_out - Callback function with argument:\r\nsession: The session, used to communicate with the browser.',156),(197,'layer_points(vis, . . ., data = NULL)/emit_points(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',157),(198,'layer_arcs(vis, . . ., data = NULL)/emit_arcs(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object, named according to the properties listed below;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',158),(199,'layer_paths(vis, . . ., data = NULL)/emit_paths(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',159),(200,'layer_ribbons(vis, . . ., data = NULL)/emit_ribbons(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object, named according to the properties listed below;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',160),(201,'layer_rects(vis, . . ., data = NULL)/emit_rects(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object, named according to the properties listed below;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',161),(202,'layer_text(vis, . . ., data = NULL)/emit_text(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object, named according to the properties listed below;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',162),(203,'layer_images(vis, . . ., data = NULL)/emit_images(vis, props( . . . ))','vis - Visualisation to modify;\r\n. . . - A props object, named according to the properties listed below;\r\ndata - An optional dataset, if you want to override the usual data inheritance for this mark.',163),(204,'layer_bars(vis, . . ., stack = TRUE, width = NULL)','vis - Visualisation to modify;\r\n. . . - Visual properties used to override defaults;\r\nstack - If there are multiple bars to be drawn at an x location, shouldthebarsbestacked? If FALSE, the bars will be overplotted on each other.\r\nwidth - Width of each bar. When x is continuous, this controls the width in the same units as x. When x is categorical, this controls the width as a proportion of the\r\nspacing between items (default is 0.9).',164),(205,'layer_lines(vis, . . . )','vis - Visualisation to modify;\r\n. . . - Visual properties.',165),(206,'layer_boxplots(vis, . . ., coef = 1.5, width = NULL)','vis - Visualisation to modify;\r\n. . . - Visual properties used to override defaults;\r\ncoef - The maximum length of the whiskers as multiple of the inter-quartile range. Default value is 1.5;\r\nwidth - Width of each bar. When x is continuous, this controls the width in the same units as x. When x is categorical, this controls the width as a proportion of the spacing between items (default is 0.9).',166),(207,'layer_densities(vis, ..., kernel = \"gaussian\", adjust = 1, density_args = list(), area = TRUE)','vis - The visualisation to modify;\r\n. . . - Visual properties, passed on to props;\r\nkernel - Smoothing kernel. See density for details;\r\nadjust - Multiple the default bandwidth by this amount. Useful for controlling wiggliness of density;\r\ndensity_args - Other arguments passed on to compute_density and thence to density;\r\narea - Should there be a shaded region drawn under the curve?',167),(208,'layer_histograms(vis, ..., width = NULL, center = NULL, boundary = NULL, closed = c(\"right\", \"left\"), stack = TRUE, binwidth)','vis - Visualisation to modify;\r\n. . . - Visual properties used to override defaults;\r\nwidth - The width of the bins. The default is NULL, which yields 30 bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data;\r\ncenter - The center of one of the bins. Note that if center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for example, use width=1 and center=0, even if 0 is outside the range of the data. At most one of center and boundary may be specified;\r\nboundary - A boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, use width = 1 and boundary = 0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified;\r\nclosed - One of \"right\" or \"left\" indicating whether right or left edges of bins are included in the bin;\r\nstack - If TRUE, will automatically stack overlapping bars;\r\nbinwidth - Deprecated; use width instead.',168),(209,'layer_freqpolys(vis, ..., width = NULL, center = NULL, boundary = NULL, closed = c(\"right\", \"left\"), binwidth)','vis - Visualisation to modify;\r\n. . . - Visual properties used to override defaults;\r\nwidth - The width of the bins. The default is NULL, which yields 30 bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data;\r\ncenter - The center of one of the bins. Note that if center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for example, use width=1 and center=0, even if 0 is outside the range of the data. At most one of center and boundary may be specified;\r\nboundary - A boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, use width = 1 and boundary = 0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified;\r\nclosed - One of \"right\" or \"left\" indicating whether right or left edges of bins are included in the bin;\r\nstack - If TRUE, will automatically stack overlapping bars;\r\nbinwidth - Deprecated; use width instead.',169),(210,'layer_model_predictions(vis, ..., model, formula = NULL, model_args = NULL, se = FALSE, domain = NULL)','vis - Visualisation to modify;\r\n. . . - Visual properties. Stroke properties control only affect line, fill properties only affect standard error band;\r\nmodel - Name of the model as a string, e.g. \"loess\", \"lm\", or \"MASS::rlm\". Must be the name of a function that produces a standard model object with a predict method. For layer_smooth this is always \"loess\";\r\nformula - Model formula. If not supplied, guessed from the visual properties, constructing y ~ x;\r\nmodel_args - A list of additional arguments passed on to the model function;\r\nse - Also display a point-wise standard error band? Defaults to FALSE because interpretation is non-trivial;\r\ndomain - If NULL (the default), the domain of the predicted values will be the same as the domain of the prediction variable in the data. It can also be a two-element\r\nnumeric vector specifying the min and max.',170),(211,'layer_smooths(vis, . . ., span = 0.75, se = FALSE)','vis - Visualisation to modify;\r\n. . . - Visual properties. Stroke properties control only affect line, fill properties only affect standard error band;\r\nspan - For layer_smooth, the span of the loess smoother;\r\nse - Also display a point-wise standard error band? Defaults to FALSE because interpretation is non-trivial.',171),(212,'layer_guess(vis, . . . )','vis - The visualisation to add the new layer to;\r\n. . . - Other arguments passed on individual layers.',172),(213,'add_data(vis, data, name = deparse2(substitute(data)), add_suffix = TRUE)','vis - Visualisation to modify;\r\ndata - Data set to add;\r\nname - Data of data - optional, but helps produce informative error messages;\r\nadd_suffix - Should a unique suffix be added to the data object’s ID? This should only be FALSE when the spec requires a data set with a specific name.',173),(214,'add_props(vis, . . ., .props = NULL, inherit = NULL, env = parent.frame())','vis - Visualisation to modify;\r\n. . . - A set of name-value pairs. The name should be a valid vega property. The first two unnamed components are taken to be x and y. Any additional unnamed components will raise an error;\r\n.props - When calling props from other functions, you’ll often have a list of quoted function functions. You can pass that function to the .props argument instead of messing around with substitute. In other words, .props lets you opt out of\r\nthe non-standard evaluation that props does;\r\ninherit - If TRUE, the defaults, will inherit from properties from the parent layer If FALSE, it will start from nothing;\r\nenv - The environment in which to evaluate variable properties.',174),(215,'add_relative_scales(vis)','vis - A ggvis object.',175),(216,'add_tooltip(vis, html, on = c(\"hover\", \"click\"))','vis - Visualisation to add tooltips to;\r\nhtml - A function that takes a single argument as input. This argument will be a list containing the data in the mark currently under the mouse. It should return a string containing HTML or NULL to hide tooltip for the current element;\r\non Should tooltips appear on hover, or on click?',176),(217,'input_checkbox(value = FALSE, label = \"\", id = rand_id(\"checkbox_\"), map = identity)','value - Initial value (TRUE or FALSE);\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value.',177),(218,'input_sider(min, max, value = (min + max)/2, step = NULL, round = FALSE, ticks = TRUE, animate = FALSE, sep = \",\", pre = NULL, post = NULL, label = \"\", id = rand_id(\"slider_\"), map = identity)','min - The minimum value (inclusive) that can be selected;\r\nmax - The maximum value (inclusive) that can be selected;\r\nvalue - The initial value of the slider. A numeric vector of length one will create a regular slider; a numeric vector of length two will create a double-ended range slider. A warning will be issued if the value doesn’t fit between min and max;\r\nstep - Specifies the interval between each selectable value on the slider (if NULL, a heuristic is used to determine the step size). If the values are dates, step is in days; if the values are times (POSIXt), step is in seconds;\r\nround - TRUE to round all values to the nearest integer; FALSE if no rounding is desired; or an integer to round to that number of digits (for example, 1 will round to the nearest 10, and -2 will round to the nearest .01). Any rounding will be applied after snapping to the nearest step;\r\nticks - FALSE to hide tick marks, TRUE to show them according to some simple heuristics;\r\nanimate - TRUE to show simple animation controls with default settings; FALSE not to; or a custom settings list, such as those created using animationOptions;\r\nsep - Separator between thousands places in numbers;\r\npre - A prefix string to put in front of the value;\r\npost - A suffix string to put after the value;\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value.',178),(219,'input_text(value, label = \"\", id = rand_id(\"text_\"), map = identity)','value - Initial value;\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value.',179),(220,'input_numeric(value, label = \"\", id = rand_id(\"numeric_\"), map = identity)','value - Initial value;\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value.',180),(221,'input_select(choices, selected = NULL, multiple = FALSE, label = \"\", id = rand_id(\"select_\"), map = identity, selectize = FALSE)','input_select can select only one if multiple = FALSE, otherwise the user can select multiple by using modifier keys.\r\nchoices - List of values to select from. If elements of the list are named then that name rather than the value is displayed to the user;\r\nselected - The initially selected value (or multiple values if multiple = TRUE). If not specified then defaults to the first value for single-select lists and no values for multiple select lists;\r\nmultiple - Is selection of multiple items allowed?\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value;\r\nselectize - Whether to use selectize.js or not.',181),(222,'input_radiobuttons(choices, selected = NULL, label = \"\", id = rand_id(\"radio_\"), map = identity)','input_radiobuttons only ever selects one value.\r\nchoices - List of values to select from. If elements of the list are named then that name rather than the value is displayed to the user;\r\nselected - The initially selected value (or multiple values if multiple = TRUE). If not specified then defaults to the first value for single-select lists and no values for multiple select lists;\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value.',181),(223,'input_checkboxgroup(choices, selected = NULL, label = \"\", id = rand_id(\"radio_\"), map = identity)','input_checkboxgroup can alway select multiple values.\r\nchoices - List of values to select from. If elements of the list are named then that name rather than the value is displayed to the user;\r\nselected - The initially selected value (or multiple values if multiple = TRUE). If not specified then defaults to the first value for single-select lists and no values for multiple select lists;\r\nlabel - Display label for the control, or NULL for no label;\r\nid - A unique identifier for this input. Usually generated automatically;\r\nmap - A function with single argument x, the value of the control on the client. Returns a modified value.',181),(224,'scales()','This creates a scale object for a given scale and variable type, and adds it to a ggvis plot. The scale object is populated with default settings, which depend on the scale (e.g. fill, x, opacity) and the type of variable (e.g. numeric, nominal, ordinal). Any settings that are passed in as arguments will override the defaults.',182),(225,'scale_numeric(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, trans = NULL, clamp = NULL, exponent = NULL, nice = NULL, zero = NULL, expand = NULL, name = property, label = NULL, override = NULL)','vis - A ggvis object;\r\nproperty - The name of a visual property, such as \"x\", \"y\", \"fill\", \"stroke\". Note both x and x2 use the \"x\" scale (similarly for y and y2). fillOpacity, opacity and strokeOpacity use the \"opacity\" scale;\r\ndomain - The domain of the scale, representing the set of data values. For ordinal scales, a character vector; for quantitative scales, a numeric vector of length two. Either value (but not both) may be NA, in which case domainMin or domainMax is set. For dynamic scales, this can also be a reactive which returns the appropriate type of vector;\r\nrange - The range of the scale, representing the set of visual values. For numeric values, the range can take the form of a two-element array with minimum and maximum values. For ordinal data, the range may by an array of desired output\r\nvalues, which are mapped to elements in the specified domain. The following range literals are also available: \"width\", \"height\", \"shapes\", \"category10\", \"category20\";\r\nreverse - If true, flips the scale range;\r\nround - If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid;\r\ntrans - A scale transformation: one of \"linear\", \"log\", \"pow\", \"sqrt\", \"quantile\", \"quantize\", \"threshold\". Default is \"linear\";\r\nclamp - If TRUE, values that exceed the data domain are clamped to either the minimum or maximum range value. Default is FALSE;\r\nexponent - Sets the exponent of the scale transformation. For pow transform only;\r\nnice - If TRUE, modifies the scale domain to use a more human-friendly number range (e.g., 7 instead of 6.96). Default is FALSE;\r\nzero - If TRUE, ensures that a zero baseline value is included in the scale domain. This option is ignored for non-quantitative scales. Default is FALSE;\r\nexpand - A multiplier for how much the scale should be expanded beyond the domain of the data. For example, if the data goes from 10 to 110, and expand is 0.05, then the resulting domain of the scale is 5 to 115. Set to 0 and use nice=FALSE if you want exact control over the domain. If left NULL, behavior will depend on the scale type. For positional scales (x and y), expand will default to 0.05. For\r\nother scales, it will default to 0;\r\nname - Name of the scale, such as \"x\", \"y\", \"fill\", etc. Can also be an arbitrary name like \"foo\";\r\nlabel - Label for the scale. Used for axis or legend titles;\r\noverride - Should the domain specified by this ggvis_scale object override other ggvis_scale objects for the same scale? Useful when domain is manually specified. For example, by default, the domain of the scale will contain the range of the data, but when this is TRUE, the specified domain will override, and the domain can be smaller than the range of the data. If FALSE, the domain will not behave this way. If left NULL, then it will be treated as TRUE whenever domain is non-NULL.',183),(226,'scale_ordinal(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, points = NULL, padding = NULL, sort = NULL, name = property, label = NULL, override = NULL)','vis - A ggvis object;\r\nproperty - The name of a property, such as \"x\", \"y\", \"fill\", \"stroke\", etc;\r\ndomain - The domain of the scale, representing the set of data values. For ordinal scales, a character vector; for quantitative scales, a numeric vector of length two. Either value (but not both) may be NA, in which case domainMin or domainMax is set. For dynamic scales, this can also be a reactive which returns the appropriate type of vector;\r\nrange - The range of the scale, representing the set of visual values. For numeric values, the range can take the form of a two-element array with minimum and maximum values. For ordinal data, the range may by an array of desired output values, which are mapped to elements in the specified domain. The following range literals are also available: \"width\", \"height\", \"shapes\", \"category10\", \"category20\";\r\nreverse - If true, flips the scale range;\r\nround - If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid;\r\npoints - If TRUE (default), distributes the ordinal values over a quantitative range at uniformly spaced points. The spacing of the points can be adjusted using the padding property. If FALSE,the ordinal scale will construct evenly-spacedbands, rather than points. Note that if any mark is added with a band() prop, then the scale for that prop will automatically have points set to FALSE;\r\npadding - Applies spacing among ordinal elements in the scale range. The actual effect depends on how the scale is configured. If the points parameter is true, the padding value is interpreted as a multiple of the spacing between points. A reasonable value is 1.0, such that the first and last point will be offset from the minimum and maximum value by half the distance between points. Otherwise, padding is typically in the range [0, 1] and corresponds to the fraction of space in the range interval to allocate to padding. A value of 0.5 means that the range band width will be equal to the padding width. For positional (x and y) scales, the default padding is 0.1. For other scales, the default padding is 0.5;\r\nsort - If TRUE, the values in the scale domain will be sorted according to their natural order. Default is FALSE;\r\nname - Name of the scale, such as \"x\", \"y\", \"fill\", etc. Can also be an arbitrary name like \"foo\";\r\nlabel - Label for the scale. Used for axis or legend titles;\r\noverride - Should the domain specified by this ggvis_scale object override other ggvis_scale objects for the same scale? Useful when domain is manually specified. For example, by default, the domain of the scale will contain the range of the data, but when this is TRUE, the specified domain will override, and the domain can be smaller than the range of the data. If FALSE, the domain will not behave this way. If left NULL, then it will be treated as TRUE whenever domain is non-NULL.',184),(227,'scale_nominal(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, points = NULL, padding = NULL, sort = NULL, name = property, label = NULL, override = NULL)','vis - A ggvis object;\r\nproperty - The name of a property, such as \"x\", \"y\", \"fill\", \"stroke\", etc;\r\ndomain - The domain of the scale, representing the set of data values. For ordinal scales, a character vector; for quantitative scales, a numeric vector of length two. Either value (but not both) may be NA, in which case domainMin or domainMax is set. For dynamic scales, this can also be a reactive which returns the appropriate type of vector;\r\nrange - The range of the scale, representing the set of visual values. For numeric values, the range can take the form of a two-element array with minimum and maximum values. For ordinal data, the range may by an array of desired output values, which are mapped to elements in the specified domain. The following range literals are also available: \"width\", \"height\", \"shapes\", \"category10\", \"category20\";\r\nreverse - If true, flips the scale range;\r\nround - If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid;\r\npoints - If TRUE (default), distributes the ordinal values over a quantitative range at uniformly spaced points. The spacing of the points can be adjusted using the padding property. If FALSE,the ordinal scale will construct evenly-spacedbands, rather than points. Note that if any mark is added with a band() prop, then the scale for that prop will automatically have points set to FALSE;\r\npadding - Applies spacing among ordinal elements in the scale range. The actual effect depends on how the scale is configured. If the points parameter is true, the padding value is interpreted as a multiple of the spacing between points. A reasonable value is 1.0, such that the first and last point will be offset from the minimum and maximum value by half the distance between points. Otherwise, padding is typically in the range [0, 1] and corresponds to the fraction of space in the range interval to allocate to padding. A value of 0.5 means that the range band width will be equal to the padding width. For positional (x and y) scales, the default padding is 0.1. For other scales, the default padding is 0.5;\r\nsort - If TRUE, the values in the scale domain will be sorted according to their natural order. Default is FALSE;\r\nname - Name of the scale, such as \"x\", \"y\", \"fill\", etc. Can also be an arbitrary name like \"foo\";\r\nlabel - Label for the scale. Used for axis or legend titles;\r\noverride - Should the domain specified by this ggvis_scale object override other ggvis_scale objects for the same scale? Useful when domain is manually specified. For example, by default, the domain of the scale will contain the range of the data, but when this is TRUE, the specified domain will override, and the domain can be smaller than the range of the data. If FALSE, the domain will not behave this way. If left NULL, then it will be treated as TRUE whenever domain is non-NULL.',185),(228,'scale_logical(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, points = NULL, padding = NULL, sort = NULL, name = property, label = NULL, override = NULL)','vis - A ggvis object;\r\nproperty - The name of a property, such as \"x\", \"y\", \"fill\", \"stroke\", etc;\r\ndomain - The domain of the scale, representing the set of data values. For ordinal scales, a character vector; for quantitative scales, a numeric vector of length two. Either value (but not both) may be NA, in which case domainMin or domainMax is set. For dynamic scales, this can also be a reactive which returns the appropriate type of vector;\r\nrange - The range of the scale, representing the set of visual values. For numeric values, the range can take the form of a two-element array with minimum and maximum values. For ordinal data, the range may by an array of desired output values, which are mapped to elements in the specified domain. The following range literals are also available: \"width\", \"height\", \"shapes\", \"category10\", \"category20\";\r\nreverse - If true, flips the scale range;\r\nround - If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid;\r\npoints - If TRUE (default), distributes the ordinal values over a quantitative range at uniformly spaced points. The spacing of the points can be adjusted using the padding property. If FALSE,the ordinal scale will construct evenly-spacedbands, rather than points. Note that if any mark is added with a band() prop, then the scale for that prop will automatically have points set to FALSE;\r\npadding - Applies spacing among ordinal elements in the scale range. The actual effect depends on how the scale is configured. If the points parameter is true, the padding value is interpreted as a multiple of the spacing between points. A reasonable value is 1.0, such that the first and last point will be offset from the minimum and maximum value by half the distance between points. Otherwise, padding is typically in the range [0, 1] and corresponds to the fraction of space in the range interval to allocate to padding. A value of 0.5 means that the range band width will be equal to the padding width. For positional (x and y) scales, the default padding is 0.1. For other scales, the default padding is 0.5;\r\nsort - If TRUE, the values in the scale domain will be sorted according to their natural order. Default is FALSE;\r\nname - Name of the scale, such as \"x\", \"y\", \"fill\", etc. Can also be an arbitrary name like \"foo\";\r\nlabel - Label for the scale. Used for axis or legend titles;\r\noverride - Should the domain specified by this ggvis_scale object override other ggvis_scale objects for the same scale? Useful when domain is manually specified. For example, by default, the domain of the scale will contain the range of the data, but when this is TRUE, the specified domain will override, and the domain can be smaller than the range of the data. If FALSE, the domain will not behave this way. If left NULL, then it will be treated as TRUE whenever domain is non-NULL.',186),(229,'scale_datetime(vis, property, domain = NULL, range = NULL, reverse = NULL, round = NULL, utc = NULL, clamp = NULL, nice = NULL, expand = NULL, name = property, label = NULL, override = NULL)','vis - A ggvis object;\r\nproperty - The name of a property, such as \"x\", \"y\", \"fill\", \"stroke\", etc;\r\ndomain - The domain of the scale, representing the set of data values. For ordinal scales, a character vector; for quantitative scales, a numeric vector of length two. Either value (but not both) may be NA, in which case domainMin or domainMax is set. For dynamic scales, this can also be a reactive which returns the appropriate type of vector;\r\nrange - The range of the scale, representing the set of visual values. For numeric values, the range can take the form of a two-element array with minimum and maximum values. For ordinal data, the range may by an array of desired output values, which are mapped to elements in the specified domain. The following range literals are also available: \"width\", \"height\", \"shapes\", \"category10\", \"category20\";\r\nreverse - If true, flips the scale range;\r\nround - If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid;\r\nutc - if TRUE, uses UTC times. Default is FALSE;\r\nclamp - If TRUE, values that exceed the data domain are clamped to either the minimum or maximum range value. Default is FALSE;\r\nnice - If specified, modifies the scale domain to use a more human-friendly value range. Should be a string indicating the desired time interval; legal values are \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", or \"year\";\r\nexpand - A multiplier for how much the scale should be expanded beyond the domain of the data. For example, if the data goes from 10 to 110, and expand is 0.05, then the resulting domain of the scale is 5 to 115. Set to 0 and use nice=FALSE if you want exact control over the domain;\r\nname - Name of the scale, such as \"x\", \"y\", \"fill\", etc. Can also be an arbitrary name like \"foo\";\r\nlabel - Label for the scale. Used for axis or legend titles;\r\noverride - Should the domain specified by this ggvis_scale object override other ggvis_scale objects for the same scale? Useful when domain is manually specified. For example, by default, the domain of the scale will contain the range of the data, but when this is TRUE, the specified domain will override, and the domain can be smaller than the range of the data. If FALSE, the domain will not behave this way. If left NULL, then it will be treated as TRUE whenever domain is non-NULL.',187),(230,'legend_props(title = NULL, labels = NULL, symbols = NULL, gradient = NULL, legend = NULL)','title - A named list of text properties for the legend title;\r\nlabels - A named list of text properties for legend labels;\r\nsymbols - A named list of line properties for symbols (for discrete legend items);\r\ngradient - A named list of line properties a continuous color gradient;\r\nlegend - A named list of line properties for the overall legend. The x and y position can be set here, which will override automatic positioning.',188),(231,'linked_brush(keys, fill = \"red\")','keys - vector of all possible keys, if known;\r\nfill - brush colour.\r\nA list with components:\r\ninput - A function that takes a visualisation as an argument and adds an input brush to that plot;\r\nselected - A reactive providing a logical vector that describes which points are under the brush;\r\nfill - A reactive that gives the fill colour of points under the brush.',189),(232,'sidebarBottomPage(sidebarPanel, mainPanel, shiny_headers = TRUE)','sidebarPanel - The sidebarBottomPanel containing input controls;\r\nmainPanel - The mainTopPanel containing the main content;\r\nshiny_headers - Should Shiny headers be embedded in the page? This should be TRUE for interactive/dynamic pages, FALSE for static pages.',190),(233,'sidebarBottomPanel( . . . )','. . . - Additional tags.',190),(234,'mainTopPanel( . . . )','. . . - Additional tags.',190),(235,'group_by(x, . . ., add = FALSE)','x - A visualisation;\r\n. . . - variables to group by;\r\nadd - By default, when add = FALSE, group_by will override existing groups. To instead add to the existing groups, use add = TRUE.',191),(236,'auto_group(vis, exclude = NULL)','vis - The ggvis visualisation to modify;\r\nexclude - A vector containing names of props to exclude from auto grouping. It is often useful to exclude c(\"x\", \"y\"), when one of those variables is categorical.',192),(237,'is.broker(x)','x - An object to test.\r\nA broker is a subclass of reactive. It can hold extra information to facilitate (or broker) communication between the client and the server.',193),(238,'singular()/scale_singular(vis, property, name = property, label = name, points = TRUE, domain = NULL, override = NULL)','vis - A ggvis object;\r\nproperty - The name of a property, such as \"x\", \"y\", \"fill\", \"stroke\", etc;\r\nname - Name of the scale, such as \"x\", \"y\", \"fill\", etc. Can also be an arbitrary name like \"foo\";\r\nlabel - Label for the scale. Used for axis or legend titles;\r\npoints - If TRUE (default), distributes the ordinal values over a quantitative range at uniformly spaced points. The spacing of the points can be adjusted using the padding property. If FALSE,the ordinal scale will construct evenly-spaced bands, rather than points. Note that if any mark is added with a band() prop, then the scale for that prop will automatically have points set to FALSE;\r\ndomain - The domain of the scale, representing the set of data values. For ordinal scales, a character vector; for quantitative scales, a numeric vector of length two. Either value (but not both) may be NA, in which case domainMin or domainMax is set. For dynamic scales, this can also be a reactive which returns the appropriate type of vector;\r\noverride - Should the domain specified by this ggvis_scale object override other ggvis_scale objects for the same scale? Useful when domain is manually specified. For example, by default, the domain of the scale will contain the range of the data, but when this is TRUE, the specified domain will override, and the domain can be smaller than the range of the data. If FALSE, the domain will not behave this way. If left NULL, then it will be treated as TRUE whenever domain is non-NULL.',194),(239,'vector_type(x)','x - A vector.\r\nThe vector_type collapses down the class of base vectors into something useful more for visualisation, yielding one of \"datetime\", \"numeric\", \"ordinal\", \"nominal\" or \"logical\".',195),(240,'zero_range(x, tol = .Machine$double.eps * 100)','x - Numeric range: vector of length 2;\r\ntol - A value specifying the tolerance. Defaults to .Machine$double.eps * 100.\r\nThe machine epsilon is the difference between 1.0 and the next number that can be represented by the machine. By default, this function uses epsilon * 100 as the tolerance. First it scales the values so that they have a mean of 1, and then it checks if the difference between them is larger than the tolerance.',196),(241,'resolution(x, zero = TRUE)','x - Numeric vector;\r\nzero - Should a zero value be automatically included in the computation of resolution.',197),(242,'compute_count(x, x_var, w_var = NULL)','x - Dataset-like object to count. Built-in methods for data frames, grouped data frames and ggvis visualisations;\r\nx_var, w_var - Names of x and weight variables.\r\nReturn a data frame with columns:\r\ncount_  - the number of points;\r\nx_ - the x value where the count was made;\r\nThe width of each \"bin\" is set to the resolution of the data – that is, the smallest difference between two x values.',198),(243,'compute_tabulate(x, x_var, w_var = NULL)','x - Dataset-like object to count. Built-in methods for data frames, grouped data frames and ggvis visualisations;\r\nx_var, w_var - Names of x and weight variables.\r\nReturn a data frame with columns:\r\ncount_ - the number of points;\r\nx_ - value of bin.',199),(244,'compute_align(x, var, length = NULL, align = 0.5, dir = \"x\")','x - Dataset-like object to align. Built-in methods for data frames, grouped data frames and ggvis visualisations;\r\nvar - Name of variable to compute width of;\r\nlength - An absolute length to use. If NULL (the default), the width will be equivalent to the resolution of the data;\r\nalign - Where does the existing variable fall on the new bins? 0 = left edge, 0.5 = center, 1 = right edge;\r\ndir - Direction, i.e. \"x\" or \"y\". Used to generate variable names in output.',200),(245,'compute_bin(x, x_var, w_var = NULL, width = NULL, center = NULL, boundary = NULL, closed = c(\"right\", \"left\"), pad = FALSE, binwidth)','x - Dataset-like object to bin. Built-in methods for data frames, grouped data frames and ggvis visualisations;\r\nx_var, w_var - Names of x and weight variables. The x variable must be continuous;\r\nwidth - The width of the bins. The default is NULL, which yields 30 bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data;\r\ncenter - The center of one of the bins. Note that if center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for example, use width=1 and center=0, even if 0 is outside the range of the data. At most one of center and boundary may be specified;\r\nboundary - A boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, usewidth = 1 and boundary = 0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified;\r\nclosed - One of \"right\" or \"left\" indicating whether right or left edges of bins are included in the bin;\r\npad - If TRUE, adds empty bins at either end of x. This ensures frequency polygons touch 0. Defaults to FALSE;\r\nbinwidth - Deprecated; use width instead.\r\nReturn a data frame with columns:\r\ncount_ - the number of points;\r\nx_ - mid-point of bin;\r\nxmin_ - left boundary of bin;\r\nxmax_ - right boundary of bin;\r\nwidth_ - width of bin.',201),(246,'compute_stack(x, stack_var = NULL, group_var = NULL)','x - A data object;\r\nstack_var - A string specifying the stacking variable;\r\ngroup_var - A string specifying the grouping variable.\r\nReturn a data frame with columns:\r\nstack_upr_ the lower y coordinate for a stack bar;\r\nstack_lwr_ the upper y coordinate for a stack bar.',202),(247,'compute_density(x, x_var, w_var = NULL, kernel = \"gaussian\", trim = FALSE, n = 256L, na.rm = FALSE, . . . )','x - Dataset (data frame, grouped_df or ggvis) object to work with;\r\nx_var, w_var - Names of variables to use for x position, and for weights;\r\nkernel - Smoothing kernel. See density for details;\r\ntrim - If TRUE, the default, density estimates are trimmed to the actual range of the data. If FALSE, they are extended by the default 3 bandwidths (as specified by the cut parameter to density);\r\nn - Number of points (along x) to use in the density estimate;\r\nna.rm - If TRUE missing values will be silently removed, otherwise they will be removed with a warning;\r\n. . . - Additional arguments passed on to density.\r\nReturn a data frame with columns:\r\npred_ - regularly spaced grid of n locations;\r\nresp_ - density estimate.',203),(248,'compute_boxplot(x, var = NULL, coef = 1.5)','x - Dataset-like object to compute boxplot values. There are built-in methods for data frames, grouped data frames, and ggvis visualisations;\r\nvar - Name of variable for which to compute boxplot values. The variable must be continuous;\r\ncoef - The maximum length of the whiskers as multiple of the inter-quartile range. Default value is 1.5.\r\nReturn a data frame with columns:\r\nmin_ - Lower whisker = smallest observation greater than or equal to lower hinge - 1.5* IQR;\r\nlower_ - Lower hinge (25th percentile);\r\nmedian_ - Median (50th percentile);\r\nupper_ - Upper hinge (75th percentile);\r\nmax_ - Upper whisker = largest observation less than or equal to upper hinge + 1.5 *IQR;\r\noutliers_ - A vector of values that are outside of the min and max.',204),(249,'compute_model_prediction(x, formula, ..., model = NULL, se = FALSE, level = 0.95, n = 80L, domain = NULL)','x - Dataset-like object to model and predict. Built-in methods for data frames, grouped data frames and ggvis visualisations;\r\nformula - Formula passed to modelling function. Can use any variables from data;\r\n. . . - arguments passed on to model function;\r\nmodel - Model fitting function to use - it must support R’s standard modelling interface, taking a formula and data frame as input, and returning predictions with predict. If not supplied, will use loess for <= 1000 points, otherwise it will use gam. Other modelling functions that will work include lm, glm and rlm;\r\nse - include standard errors in output? Requires appropriate method of predict_grid, since the interface for returning predictions with standard errors is not consistent acrossing modelling frameworks;\r\nlevel - the confidence level of the standard errors;\r\nn - the number of grid points to use in the prediction;\r\ndomain - If NULL (the default), the domain of the predicted values will be the same as the domain of the prediction variable in the data. It can also be a two-element numeric vector specifying the min and max.\r\nReturn a data frame with columns:\r\nresp_  - regularly spaced grid of n locations;\r\npred_  - predicted value from model;\r\npred_lwr_ and pred_upr_ - upper and lower bounds of confidence interval (if se = TRUE);\r\npred_se_ - the standard error (width of the confidence interval) (if se = TRUE).',205),(250,'compute_smooth(x, formula, . . ., span = 0.75, se = FALSE)','x - Dataset-like object to model and predict. Built-in methods for data frames, grouped data frames and ggvis visualisations;\r\nformula - Formula passed to modelling function. Can use any variables from data;\r\n. . . - Arguments passed on to model function;\r\nspan - Smoothing span used for loess model;\r\nse - include standard errors in output? Requires appropriate method of predict_grid, since the interface for returning predictions with standard errors is not consistent acrossing modelling frameworks.\r\nReturn a data frame with columns:\r\nresp_  - regularly spaced grid of n locations;\r\npred_  - predicted value from model;\r\npred_lwr_ and pred_upr_ - upper and lower bounds of confidence interval (if se = TRUE);\r\npred_se_ - the standard error (width of the confidence interval) (if se = TRUE).',206);
/*!40000 ALTER TABLE `knowledge_base_usage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `reversion_revision`
--

LOCK TABLES `reversion_revision` WRITE;
/*!40000 ALTER TABLE `reversion_revision` DISABLE KEYS */;
/*!40000 ALTER TABLE `reversion_revision` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `reversion_version`
--

LOCK TABLES `reversion_version` WRITE;
/*!40000 ALTER TABLE `reversion_version` DISABLE KEYS */;
/*!40000 ALTER TABLE `reversion_version` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-08-30 18:09:50
